import { NextRequest, NextResponse } from 'next/server';

// –ü—Ä–æ—Å—Ç–∏–π –∫–µ—à –¥–ª—è Next.js
const cache = new Map<string, { data: any; timestamp: number }>();
const CACHE_TTL = 24 * 60 * 60 * 1000; // 24 –≥–æ–¥–∏–Ω–∏

export async function POST(req: NextRequest) {
  try {
    console.log("=== NEXT.JS API: –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç ===");
    const body = await req.json();
    console.log("=== NEXT.JS API: Request body ===");
    console.log(JSON.stringify(body, null, 2));
    
    const { question, image, adsData, accessToken, refreshToken } = body;
    
    console.log("=== NEXT.JS API: –†–æ–∑–ø–∞—Ä—Å–µ–Ω—ñ –¥–∞–Ω—ñ ===");
    console.log("adsData present:", !!adsData);
    console.log("accessToken present:", !!accessToken);
    console.log("refreshToken present:", !!refreshToken);

    if (!question) {
      return NextResponse.json(
        { error: 'Question is required' },
        { status: 400 }
      );
    }

    // –ö–ª—é—á –∫–µ—à—É –≤—Ä–∞—Ö–æ–≤—É—î –ø–∏—Ç–∞–Ω–Ω—è, –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç Ads
    const cacheKey = `${question}|${image ? 'img' : ''}|${adsData ? JSON.stringify(adsData).slice(0,500) : ''}`;
    const cached = cache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
      return NextResponse.json(cached.data);
    }

    // –ê–¥—Ä–µ—Å–∞ Python AI-—Å–µ—Ä–≤–µ—Ä–∞ (–º–æ–∂–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —á–µ—Ä–µ–∑ env)
    const aiServerUrl = process.env.AI_SERVER_URL || 'http://91.99.225.211:8000/chat';

    // –§–æ—Ä–º—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ AI-—Å–µ—Ä–≤–µ—Ä–∞ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –ø—Ä–æ –º–æ–≤—É
    const requestBody = {
      question: `${question}\n\nIMPORTANT: Respond in the same language as the user's question. If the user writes in Russian, respond in Russian. If the user writes in English, respond in English.`,
      image: image || null, // –î–æ–¥–∞—î–º–æ –ø—ñ–¥—Ç—Ä–∏–º–∫—É –∑–æ–±—Ä–∞–∂–µ–Ω—å
      adsData: adsData || null, // –î–æ–¥–∞—î–º–æ adsData
      accessToken: accessToken || null, // –î–æ–¥–∞—î–º–æ accessToken
      refreshToken: refreshToken || null, // –î–æ–¥–∞—î–º–æ refreshToken
      timestamp: new Date().toISOString()
    };

    // –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø JSON –î–õ–Ø –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò
    console.log("=== NEXT.JS API: –î–ï–¢–ê–õ–¨–ù–ï –õ–û–ì–£–í–ê–ù–ù–Ø JSON ===");
    console.log("Request body before JSON.stringify:");
    console.log(requestBody);
    
    const jsonString = JSON.stringify(requestBody);
    console.log("JSON string after JSON.stringify:");
    console.log(jsonString);
    console.log("JSON string length:", jsonString.length);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
    const problematicChars = jsonString.match(/\\[^"\\\/bfnrtu]/g);
    if (problematicChars) {
      console.log("‚ö†Ô∏è –ó–ù–ê–ô–î–ï–ù–û –ü–†–û–ë–õ–ï–ú–ù–Ü –°–ò–ú–í–û–õ–ò:", problematicChars);
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –Ω–µ–µ–∫—Ä–∞–Ω–æ–≤–∞–Ω–∏—Ö –ª–∞–ø–æ–∫
    const unescapedQuotes = jsonString.match(/[^\\]"/g);
    if (unescapedQuotes) {
      console.log("‚ö†Ô∏è –ó–ù–ê–ô–î–ï–ù–û –ù–ï–ï–ö–†–ê–ù–û–í–ê–ù–Ü –õ–ê–ü–ö–ò:", unescapedQuotes.length);
    }

    const aiRes = await fetch(aiServerUrl, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'User-Agent': 'Kampaio-AI-Client/1.0'
      },
      body: JSON.stringify(requestBody),
      // Timeout 30 —Å–µ–∫—É–Ω–¥
      signal: AbortSignal.timeout(120000) // 2 —Ö–≤–∏–ª–∏–Ω–∏ –∑–∞–º—ñ—Å—Ç—å 30 —Å–µ–∫—É–Ω–¥
    });

    if (!aiRes.ok) {
      throw new Error(`AI server responded with status: ${aiRes.status}`);
    }

    const aiData = await aiRes.json();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    if (!aiData.answer) {
      throw new Error('Invalid response format from AI server');
    }

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
    cache.set(cacheKey, { data: aiData, timestamp: Date.now() });

    return NextResponse.json(aiData);

  } catch (error: any) {
    console.error('=== NEXT.JS API: –ü–û–ú–ò–õ–ö–ê ===');
    console.error('Error type:', error.constructor.name);
    console.error('Error message:', error.message);
    console.error('Error stack:', error.stack);
    
    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è JSON –ø–æ–º–∏–ª–æ–∫
    if (error.message.includes('JSON') || error.message.includes('parse')) {
      console.error('üîç –¶–µ —Å—Ö–æ–∂–µ –Ω–∞ JSON –ø–æ–º–∏–ª–∫—É!');
    }

    // Fallback –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫—â–æ AI-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
    if (error.name === 'AbortError' || error.message.includes('fetch')) {
      return NextResponse.json({
        answer: `üîß **AI-—Å–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π**

–ù–∞—Ä–∞–∑—ñ —è –Ω–µ –º–æ–∂—É –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–∏—á–∏–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ:

1. **–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è** –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
2. **–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç** —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω
3. **–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏** —è–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è

*–ü–æ–º–∏–ª–∫–∞: ${error.message}*`
      });
    }

    return NextResponse.json({
      answer: `‚ùå **–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É**

–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ:

1. **–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è**
2. **–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è**
3. **–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ —Å–ø—Ä–æ–±—É**

*–î–µ—Ç–∞–ª—ñ: ${error.message}*`
    }, { status: 500 });
  }
} 