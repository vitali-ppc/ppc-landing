'use client';

import React, { useState, useRef, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import { ReactNode } from 'react';

interface Message {
  role: 'user' | 'ai';
  text: string;
  image?: string; // base64 –∞–±–æ URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
}

interface Chat {
  id: string;
  title: string;
  messages: Message[];
  createdAt: Date;
  updatedAt: Date;
}

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏ –¥–ª—è —à–∞–±–ª–æ–Ω—ñ–≤ –∑–≤—ñ—Ç—ñ–≤
interface ReportTemplate {
  id: string;
  name: string;
  description: string;
  icon: string;
  prompt: string;
}

type ReportType = 'campaign-analysis' | 'keyword-analysis' | 'monthly-report' | 'quick-analysis' | 'performance-review' | 'budget-analysis';

// –¢–∏–ø–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
type ConnectionState = 'disconnected' | 'connecting' | 'connected_test' | 'connected_real' | 'error';

interface DataStatus {
  hasData: boolean;
  dataType: 'real' | 'test' | 'none';
  dataSource: 'OAuth2' | 'mock' | null;
  connectionState: ConnectionState;
}

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —à–∞–±–ª–æ–Ω—ñ–≤ –∑–≤—ñ—Ç—ñ–≤
const REPORT_TEMPLATES: Record<ReportType, ReportTemplate> = {
  'campaign-analysis': {
    id: 'campaign-analysis',
    name: '–ê–Ω–∞–ª—ñ–∑ –∫–∞–º–ø–∞–Ω—ñ–π',
    description: '–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ Google Ads –∫–∞–º–ø–∞–Ω—ñ–π',
    icon: 'üìä',
    prompt: `–°—Ç–≤–æ—Ä–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –∑–≤—ñ—Ç –∞–Ω–∞–ª—ñ–∑—É Google Ads –∫–∞–º–ø–∞–Ω—ñ–π.

–í–ê–ñ–õ–ò–í–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò –Ω–∞–¥–∞–Ω—ñ –¥–∞–Ω—ñ Google Ads. –ù–µ –≤–∏–≥–∞–¥—É–π —Ü–∏—Ñ—Ä–∏.

–í–∫–ª—é—á–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏:

üìä –ó–ê–ì–ê–õ–¨–ù–Ü –ü–û–ö–ê–ó–ù–ò–ö–ò
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏, –∫–ª—ñ–∫–∏, –ø–æ–∫–∞–∑–∏, CTR, CPC, –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó, CR, ROAS, ROI –∑ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∞–ª—å–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫

üèÜ –¢–û–ü –ö–ê–ú–ü–ê–ù–Ü–á
‚Ä¢ 3-5 –Ω–∞–π–∫—Ä–∞—â–∏—Ö –∫–∞–º–ø–∞–Ω—ñ–π –∑ —Ä–µ–∞–ª—å–Ω–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ (–≤–∫–ª—é—á–∞—é—á–∏ ROAS)
‚Ä¢ –©–æ —Ä–æ–±–∏—Ç—å —ó—Ö —É—Å–ø—ñ—à–Ω–∏–º–∏ (–Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö)

üë• –î–ï–ú–û–ì–†–ê–§–Ü–ß–ù–ò–ô –ê–ù–ê–õ–Ü–ó
‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó –∑–∞ –≤—ñ–∫–æ–º —Ç–∞ —Å—Ç–∞—Ç—Ç—é (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ)
‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä—ñ–∑–Ω–∏—Ö –¥–µ–º–æ–≥—Ä–∞—Ñ—ñ—á–Ω–∏—Ö —Å–µ–≥–º–µ–Ω—Ç—ñ–≤

‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–Ü –ö–ê–ú–ü–ê–ù–Ü–á
‚Ä¢ –ö–∞–º–ø–∞–Ω—ñ—ó –∑ –Ω–∏–∑—å–∫–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ (–∑ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö)
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ —Ç–∞ –ø—Ä–∏—á–∏–Ω–∏

üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∞–Ω–∞–ª—ñ–∑—É
‚Ä¢ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
‚Ä¢ –û—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –µ–º–æ–¥–∑—ñ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è. –ü–æ—Å–∏–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫–∞–º–ø–∞–Ω—ñ—ó —Ç–∞ —Ü–∏—Ñ—Ä–∏ –∑ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.`
  },
  'keyword-analysis': {
    id: 'keyword-analysis',
    name: '–ê–Ω–∞–ª—ñ–∑ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤',
    description: '–ê–Ω–∞–ª—ñ–∑ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —Ç–∞ —Ñ—Ä–∞–∑',
    icon: 'üîç',
    prompt: `–°—Ç–≤–æ—Ä–∏ –∑–≤—ñ—Ç –∞–Ω–∞–ª—ñ–∑—É –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ Google Ads.

–í–ê–ñ–õ–ò–í–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò –Ω–∞–¥–∞–Ω—ñ –¥–∞–Ω—ñ Google Ads. –ù–µ –≤–∏–≥–∞–¥—É–π —Ü–∏—Ñ—Ä–∏.

–í–∫–ª—é—á–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏:

üîç –í–ò–°–û–ö–û–ï–§–ï–ö–¢–ò–í–ù–Ü –ö–õ–Æ–ß–û–í–Ü –°–õ–û–í–ê
‚Ä¢ –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑ –≤–∏—Å–æ–∫–∏–º–∏ –∫–æ–Ω–≤–µ—Ä—Å—ñ—è–º–∏ —Ç–∞ Quality Score (–∑ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö)
‚Ä¢ –á—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–∞ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ

‚ùå –ü–†–û–ë–õ–ï–ú–ù–Ü –ö–õ–Æ–ß–û–í–Ü –°–õ–û–í–ê
‚Ä¢ –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∑ –Ω–∏–∑—å–∫–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ —Ç–∞ Quality Score (–∑ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö)
‚Ä¢ –ü—Ä–∏—á–∏–Ω–∏ –Ω–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ

üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–Ü–Ø–ú
‚Ä¢ –ë—Ä–µ–Ω–¥–æ–≤—ñ, —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ, —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
‚Ä¢ CTR, CPC, –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó, Quality Score –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö

üéØ –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø
‚Ä¢ –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Å—Ç–∞–≤–æ–∫ (–≤–∏—Å–æ–∫–∏–π Quality Score)
‚Ä¢ –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–Ω—è (–Ω–∏–∑—å–∫–∏–π Quality Score)
‚Ä¢ –ù–æ–≤—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –µ–º–æ–¥–∑—ñ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è. –ü–æ—Å–∏–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ —Ç–∞ —Ü–∏—Ñ—Ä–∏ –∑ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.`
  },
  'monthly-report': {
    id: 'monthly-report',
    name: '–ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç',
    description: '–ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç –∑ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è–º',
    icon: 'üìÖ',
    prompt: `–°—Ç–≤–æ—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –º—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç Google Ads.

–í–ê–ñ–õ–ò–í–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò –Ω–∞–¥–∞–Ω—ñ –¥–∞–Ω—ñ Google Ads. –ù–µ –≤–∏–≥–∞–¥—É–π —Ü–∏—Ñ—Ä–∏.

–í–∫–ª—é—á–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏:

üìÖ –ó–ê–ì–ê–õ–¨–ù–ò–ô –û–ì–õ–Ø–î –ú–Ü–°–Ø–¶–Ø
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ñ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ç–∞ ROAS, ROI
‚Ä¢ –ö–ª—é—á–æ–≤—ñ –º–µ—Ç—Ä–∏–∫–∏ –º—ñ—Å—è—Ü—è

üìà –ü–û–†–Ü–í–ù–Ø–ù–ù–Ø –ó –ü–û–ü–ï–†–ï–î–ù–Ü–ú –ú–Ü–°–Ø–¶–ï–ú
‚Ä¢ –ó–º—ñ–Ω–∏ –≤ –≤–∏—Ç—Ä–∞—Ç–∞—Ö, –∫–ª—ñ–∫–∞—Ö, –∫–æ–Ω–≤–µ—Ä—Å—ñ—è—Ö, ROAS
‚Ä¢ –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∞–±–æ –ø–æ–≥—ñ—Ä—à–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤

üë• –î–ï–ú–û–ì–†–ê–§–Ü–ß–ù–Ü –¢–†–ï–ù–î–ò
‚Ä¢ –ó–º—ñ–Ω–∏ –≤ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó –∑–∞ –≤—ñ–∫–æ–º —Ç–∞ —Å—Ç–∞—Ç—Ç—é
‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä—ñ–∑–Ω–∏—Ö —Å–µ–≥–º–µ–Ω—Ç—ñ–≤

üéØ –î–û–°–¢–ò–ì–ù–ï–ù–Ü –¶–Ü–õ–Ü
‚Ä¢ –©–æ –±—É–ª–æ –¥–æ—Å—è–≥–Ω—É—Ç–æ
‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–ª–∞–Ω—ñ–≤

üìä –¢–†–ï–ù–î–ò –¢–ê –ê–ù–ê–õ–Ü–ó
‚Ä¢ –ó–º—ñ–Ω–∏ –≤ –ø–æ–≤–µ–¥—ñ–Ω—Ü—ñ –∞—É–¥–∏—Ç–æ—Ä—ñ—ó
‚Ä¢ –°–µ–∑–æ–Ω–Ω—ñ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—ó
‚Ä¢ –ù–æ–≤—ñ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ

üí° –ü–õ–ê–ù –ù–ê –ù–ê–°–¢–£–ü–ù–ò–ô –ú–Ü–°–Ø–¶–¨
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ü—ñ–ª—ñ
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è
‚Ä¢ –û—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –µ–º–æ–¥–∑—ñ —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è. –ü–æ—Å–∏–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ü–∏—Ñ—Ä–∏ –∑ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.`
  },
  'quick-analysis': {
    id: 'quick-analysis',
    name: '–®–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑',
    description: '–®–≤–∏–¥–∫–∏–π –æ–≥–ª—è–¥ –∫–ª—é—á–æ–≤–∏—Ö –ø—Ä–æ–±–ª–µ–º —Ç–∞ —Ä—ñ—à–µ–Ω—å',
    icon: '‚ö°',
    prompt: `–°—Ç–≤–æ—Ä–∏ —à–≤–∏–¥–∫–∏–π –∞–Ω–∞–ª—ñ–∑ Google Ads –∞–∫–∞—É–Ω—Ç—É.

–í–ê–ñ–õ–ò–í–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò –Ω–∞–¥–∞–Ω—ñ –¥–∞–Ω—ñ Google Ads. –ù–µ –≤–∏–≥–∞–¥—É–π —Ü–∏—Ñ—Ä–∏.

–í–∫–ª—é—á–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏:

‚ö° –ö–õ–Æ–ß–û–í–Ü –ú–ï–¢–†–ò–ö–ò
‚Ä¢ ROI, ROAS, CPA, CPL –∑ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ

üö® –ö–†–ò–¢–ò–ß–ù–Ü –ü–†–û–ë–õ–ï–ú–ò
‚Ä¢ –ù–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ –ø—Ä–æ–±–ª–µ–º–∏ –¥–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è (–∑ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö)
‚Ä¢ –á—Ö –≤–ø–ª–∏–≤ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏

‚úÖ –®–í–ò–î–ö–Ü –ü–ï–†–ï–ú–û–ì–ò
‚Ä¢ –©–æ –ø—Ä–∞—Ü—é—î –¥–æ–±—Ä–µ (–Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö)
‚Ä¢ –©–æ –º–æ–∂–Ω–∞ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –ª–µ–≥–∫–æ

üéØ –®–í–ò–î–ö–Ü –î–Ü–á
‚Ä¢ 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –¥—ñ–π –Ω–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å
‚Ä¢ –û—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –µ–º–æ–¥–∑—ñ —Ç–∞ –ª–∞–∫–æ–Ω—ñ—á–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è. –ü–æ—Å–∏–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ü–∏—Ñ—Ä–∏ –∑ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.`
  },
  'performance-review': {
    id: 'performance-review',
    name: '–û–≥–ª—è–¥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ',
    description: '–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–∞–º–ø–∞–Ω—ñ–π',
    icon: 'üìà',
    prompt: `–°—Ç–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –æ–≥–ª—è–¥ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ Google Ads.

–í–ê–ñ–õ–ò–í–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò –Ω–∞–¥–∞–Ω—ñ –¥–∞–Ω—ñ Google Ads. –ù–µ –≤–∏–≥–∞–¥—É–π —Ü–∏—Ñ—Ä–∏.

–í–∫–ª—é—á–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏:

üìà –ü–†–û–î–£–ö–¢–ò–í–ù–Ü–°–¢–¨ –ö–ê–ú–ü–ê–ù–Ü–ô
‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –∫–∞–º–ø–∞–Ω—ñ–π –∑–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é (ROAS, ROI)
‚Ä¢ ROI —Ç–∞ ROAS –ø–æ –∫–∞–º–ø–∞–Ω—ñ—è—Ö –∑ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö

üéØ –¶–Ü–õ–¨–û–í–Ü –ê–£–î–ò–¢–û–†–Ü–á
‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –∞—É–¥–∏—Ç–æ—Ä—ñ–π –∑–∞ –¥–µ–º–æ–≥—Ä–∞—Ñ—ñ—î—é (–≤—ñ–∫, —Å—Ç–∞—Ç—å)
‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä—ñ–∑–Ω–∏—Ö —Å–µ–≥–º–µ–Ω—Ç—ñ–≤

üí∞ –ë–Æ–î–ñ–ï–¢–ù–ê –ï–§–ï–ö–¢–ò–í–ù–Ü–°–¢–¨
‚Ä¢ –†–æ–∑–ø–æ–¥—ñ–ª –±—é–¥–∂–µ—Ç—É
‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏—Ç—Ä–∞—Ç (ROI, ROAS)

üìä –ö–û–ù–í–ï–†–°–Ü–ô–ù–ê –í–ò–®–ö–ê
‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –≤–æ—Ä–æ–Ω–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å—ñ–π
‚Ä¢ –í—Ç—Ä–∞—Ç–∏ –Ω–∞ –∫–æ–∂–Ω–æ–º—É –µ—Ç–∞–ø—ñ

üí° –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø –ü–†–û–î–£–ö–¢–ò–í–ù–û–°–¢–Ü
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
‚Ä¢ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –µ–º–æ–¥–∑—ñ —Ç–∞ –¥–µ—Ç–∞–ª—å–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è. –ü–æ—Å–∏–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ü–∏—Ñ—Ä–∏ –∑ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.`
  },
  'budget-analysis': {
    id: 'budget-analysis',
    name: '–ê–Ω–∞–ª—ñ–∑ –±—é–¥–∂–µ—Ç—É',
    description: '–ê–Ω–∞–ª—ñ–∑ —Ä–æ–∑–ø–æ–¥—ñ–ª—É —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –±—é–¥–∂–µ—Ç—É',
    icon: 'üí∞',
    prompt: `–°—Ç–≤–æ—Ä–∏ –∞–Ω–∞–ª—ñ–∑ –±—é–¥–∂–µ—Ç—É Google Ads.

–í–ê–ñ–õ–ò–í–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò –Ω–∞–¥–∞–Ω—ñ –¥–∞–Ω—ñ Google Ads. –ù–µ –≤–∏–≥–∞–¥—É–π —Ü–∏—Ñ—Ä–∏.

–í–∫–ª—é—á–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–¥—ñ–ª–∏:

üí∞ –†–û–ó–ü–û–î–Ü–õ –ë–Æ–î–ñ–ï–¢–£
‚Ä¢ –Ø–∫ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–∏–π –±—é–¥–∂–µ—Ç –ø–æ –∫–∞–º–ø–∞–Ω—ñ—è—Ö
‚Ä¢ –í—ñ–¥—Å–æ—Ç–∫–∏ –≤–∏—Ç—Ä–∞—Ç

üìä –ï–§–ï–ö–¢–ò–í–ù–Ü–°–¢–¨ –í–ò–¢–†–ê–¢
‚Ä¢ ROI —Ç–∞ ROAS –ø–æ –∫–∞–º–ø–∞–Ω—ñ—è—Ö –∑ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
‚Ä¢ –ù–∞–π–±—ñ–ª—å—à –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏

üéØ –ë–Æ–î–ñ–ï–¢–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á
‚Ä¢ –ö—É–¥–∏ –∑–±—ñ–ª—å—à–∏—Ç–∏ –±—é–¥–∂–µ—Ç (–≤–∏—Å–æ–∫–∏–π ROAS)
‚Ä¢ –ö—É–¥–∏ –∑–º–µ–Ω—à–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ (–Ω–∏–∑—å–∫–∏–π ROAS)

‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ò –ë–Æ–î–ñ–ï–¢–£
‚Ä¢ –ù–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ (–∑ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö)
‚Ä¢ –ü–µ—Ä–µ–≤–∏—Ç—Ä–∞—Ç–∏ –∞–±–æ –Ω–µ–¥–æ—Ç—Ä–∞—Ç–∏

üí° –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–Ø –ë–Æ–î–ñ–ï–¢–£
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∑–º—ñ–Ω–∏ –≤ —Ä–æ–∑–ø–æ–¥—ñ–ª—ñ
‚Ä¢ –û—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –µ–º–æ–¥–∑—ñ —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–µ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è. –ü–æ—Å–∏–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ü–∏—Ñ—Ä–∏ –∑ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.`
  }
};

const AI_AVATAR = (
  <div style={{
    width: 36,
    height: 36,
    borderRadius: '50%',
    background: 'linear-gradient(135deg, #e6f7ff 0%, #cbd5e1 100%)',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontWeight: 700,
    color: '#23272f',
    fontSize: 18,
    boxShadow: '0 2px 8px rgba(0,0,0,0.04)'
  }}>
    <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
      <rect x="3" y="10" width="3" height="7" rx="1.2" fill="#38bdf8" />
      <rect x="9" y="6" width="3" height="11" rx="1.2" fill="#0ea5e9" />
      <rect x="15" y="3" width="3" height="14" rx="1.2" fill="#23272f" />
    </svg>
  </div>
);

function getUserInitials() {
  return '–í';
}

const USER_AVATAR = (
  <div style={{
    width: 36,
    height: 36,
    borderRadius: '50%',
    background: '#23272f',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    fontWeight: 700,
    color: '#fff',
    fontSize: 18,
    boxShadow: '0 2px 8px rgba(0,0,0,0.04)'
  }}>
    {getUserInitials()}
  </div>
);

const ChatFormGPT: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const inputRef = useRef<HTMLTextAreaElement>(null);
  const chatEndRef = useRef<HTMLDivElement>(null);
  const [adsData, setAdsData] = useState<any>(null);
  const [useAdsData, setUseAdsData] = useState(false);
  const [realAdsData, setRealAdsData] = useState<any>(null);
  const [copied, setCopied] = useState(false);
  const [accountConnected, setAccountConnected] = useState(false);
  const [showAccountModal, setShowAccountModal] = useState(false);
  const [accessToken, setAccessToken] = useState<string | null>(null);
  const [openExportDropdownIdx, setOpenExportDropdownIdx] = useState<number | null>(null);
  const [theme, setTheme] = useState<'light' | 'dark'>(typeof window !== 'undefined' && window.localStorage.getItem('chatTheme') === 'dark' ? 'dark' : 'light');
  const [placeholderIndex, setPlaceholderIndex] = useState(0);
  const [chats, setChats] = useState<Chat[]>([]);
  const [currentChatId, setCurrentChatId] = useState<string | null>(null);
  const [showSidebar, setShowSidebar] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [openMenuId, setOpenMenuId] = useState<string | null>(null);
  const [editingChatId, setEditingChatId] = useState<string | null>(null);
  const [editingTitle, setEditingTitle] = useState('');
  const [selectedImage, setSelectedImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [showReportTemplates, setShowReportTemplates] = useState(false);

  // –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É –¥–∞–Ω–∏—Ö
  const getDataStatus = (): DataStatus => {
    const hasData = useAdsData && (realAdsData || adsData);
    let dataType: 'real' | 'test' | 'none' = 'none';
    let dataSource: 'OAuth2' | 'mock' | null = null;
    let connectionState: ConnectionState = 'disconnected';

    if (hasData) {
      if (realAdsData) {
        dataType = 'real';
        dataSource = 'OAuth2';
        connectionState = 'connected_real';
      } else if (adsData) {
        dataType = 'test';
        dataSource = 'mock';
        connectionState = 'connected_test';
      }
    }

    return {
      hasData,
      dataType,
      dataSource,
      connectionState
    };
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
  const autoConnectToGoogleAds = async (): Promise<boolean> => {
    try {
      // –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
      // –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π OAuth2 flow
      console.log('=== AUTO CONNECT TO GOOGLE ADS ===');
      
      // –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –∞–∫—Ç–∏–≤—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
      if (!useAdsData) {
        setUseAdsData(true);
        // –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ —â–æ–± —Å—Ç–∞–Ω –æ–Ω–æ–≤–∏–≤—Å—è
        await new Promise(resolve => setTimeout(resolve, 100));
        return true;
      }
      
      return false;
    } catch (error) {
      console.error('Auto connect failed:', error);
      return false;
    }
  };

  useEffect(() => {
    if (typeof window !== 'undefined') {
      document.body.dataset.chatTheme = theme;
      window.localStorage.setItem('chatTheme', theme);
    }
  }, [theme]);

  // typing-–µ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ ref
  const typingTextRef = useRef<string | null>(null);
  const typingInterrupted = useRef(false);
  const typingTimeout = useRef<NodeJS.Timeout | null>(null);
  const typingIndex = useRef(0);
  const [typingText, setTypingText] = useState<string | null>(null);
  const [shownMessages, setShownMessages] = useState<Set<string>>(() => {
    if (typeof window !== 'undefined') {
      const saved = window.localStorage.getItem('chatTypedMessages');
      return saved ? new Set(JSON.parse(saved)) : new Set();
    }
    return new Set();
  });

  const startTypingEffect = (fullText: string) => {
    console.log('=== START TYPING EFFECT ===');
    console.log('Text length:', fullText.length);
    console.log('Current chat ID:', currentChatId);
    
    typingInterrupted.current = false;
    typingIndex.current = 0;
    typingTextRef.current = '';
    setTypingText('');
    if (typingTimeout.current) clearTimeout(typingTimeout.current);
    const type = () => {
      if (typingInterrupted.current) {
        console.log('=== TYPING INTERRUPTED ===');
        setTypingText(null);
        typingTextRef.current = null;
        return;
      }
      typingTextRef.current = fullText.slice(0, typingIndex.current + 1);
      setTypingText(typingTextRef.current);
      if (typingIndex.current < fullText.length - 1) {
        typingIndex.current++;
        typingTimeout.current = setTimeout(type, 12 + Math.random() * 30);
      } else {
        console.log('=== TYPING COMPLETED ===');
        setTypingText(null);
        typingTextRef.current = null;
      }
    };
    type();
  };

  // –ó–∞–∫—Ä–∏–≤–∞—Ç–∏ dropdown –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –º–µ–Ω—é —Ç–∞ –∫–Ω–æ–ø–∫–æ—é
  useEffect(() => {
    const handleClick = (e: MouseEvent) => {
      console.log('=== GLOBAL CLICK HANDLER ===');
      console.log('Target:', e.target);
      console.log('Current target:', e.currentTarget);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ–∫ –±—É–≤ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ dropdown –º–µ–Ω—é
      const target = e.target as Element;
      const isInsideDropdown = target.closest('[data-export-dropdown]');
      
      if (!isInsideDropdown) {
        console.log('Click outside dropdown - closing');
        setOpenExportDropdownIdx(null);
      } else {
        console.log('Click inside dropdown - keeping open');
      }
    };
    if (openExportDropdownIdx !== null) {
      document.addEventListener('click', handleClick);
    } else {
      document.removeEventListener('click', handleClick);
    }
    return () => document.removeEventListener('click', handleClick);
  }, [openExportDropdownIdx]);

  // –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è mock-–¥–∞–Ω–∏—Ö –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Ä–µ–Ω–¥–µ—Ä—ñ
  useEffect(() => {
    fetch('/api/ads-data')
      .then(res => res.json())
      .then(data => setAdsData(data))
      .catch(() => setAdsData(null));
  }, []);

  // –û–±—Ä–æ–±–∫–∞ OAuth2 callback
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const authStatus = urlParams.get('auth');
    const token = urlParams.get('access_token');
    const error = urlParams.get('error');

    if (authStatus === 'success' && token) {
      setAccessToken(token);
      setAccountConnected(true);
      setShowAccountModal(false);
      // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ Google Ads
      fetchRealAdsData(token);
      // –û—á–∏—â–∞—î–º–æ URL
      window.history.replaceState({}, document.title, window.location.pathname);
    } else if (error) {
      setError(`–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: ${error}`);
      // –û—á–∏—â–∞—î–º–æ URL
      window.history.replaceState({}, document.title, window.location.pathname);
    }
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö Google Ads
  const fetchRealAdsData = async (token: string) => {
    try {
      const response = await fetch('/api/ads-data-real', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ accessToken: token }),
      });
      
      if (response.ok) {
        const data = await response.json();
        setRealAdsData(data);
      } else {
        console.error('Failed to fetch real Google Ads data');
      }
    } catch (error) {
      console.error('Error fetching real Google Ads data:', error);
    }
  };

  useEffect(() => {
    inputRef.current?.focus();
  }, []);

  useEffect(() => {
    const chatDiv = chatEndRef.current?.parentElement;
    if (!chatDiv) return;
    const isAtBottom = chatDiv.scrollHeight - chatDiv.scrollTop - chatDiv.clientHeight < 50;
    if (isAtBottom) {
      chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }
  }, [messages]);

  // –ó–∞–ø—É—Å–∫ typing-–µ—Ñ–µ–∫—Ç—É –ø—Ä–∏ –Ω–æ–≤—ñ–π AI-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  useEffect(() => {
    // –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π typing effect –ø—Ä–∏ –∑–º—ñ–Ω—ñ —á–∞—Ç—É
    if (typingTimeout.current) {
      clearTimeout(typingTimeout.current);
      typingInterrupted.current = true;
      setTypingText(null);
      typingTextRef.current = null;
    }
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ typing effect —Ç—ñ–ª—å–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö AI –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if (!loading && messages.length > 0 && messages[messages.length - 1].role === 'ai') {
      const lastAiMsg = messages[messages.length - 1].text;
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–Ω–µ –±—É–ª–æ –ø–æ–∫–∞–∑–∞–Ω–æ —Ä–∞–Ω—ñ—à–µ)
      if (typingText === null && lastAiMsg && lastAiMsg.length > 0) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –¥—ñ–π—Å–Ω–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const lastMessageId = `${currentChatId}-${messages.length}-${lastAiMsg.slice(0, 50)}`;
        const isNewMessage = !shownMessages.has(lastMessageId) && 
          messages.length > 1 && 
          messages[messages.length - 2]?.role === 'user' && 
          messages[messages.length - 1]?.role === 'ai';
        
        if (isNewMessage) {
          console.log('=== NEW AI MESSAGE DETECTED ===');
          console.log('Message ID:', lastMessageId);
          setShownMessages(prev => {
            const newSet = new Set(Array.from(prev).concat(lastMessageId));
            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
            if (typeof window !== 'undefined') {
              window.localStorage.setItem('chatTypedMessages', JSON.stringify(Array.from(newSet)));
            }
            return newSet;
          });
          startTypingEffect(lastAiMsg);
        } else {
          console.log('=== EXISTING AI MESSAGE - NO TYPING EFFECT ===');
          console.log('Message ID:', lastMessageId);
          console.log('Already shown:', shownMessages.has(lastMessageId));
        }
      }
    }
    if (loading) {
      setTypingText(null);
      typingTextRef.current = null;
      if (typingTimeout.current) clearTimeout(typingTimeout.current);
      typingInterrupted.current = false;
    }
    // eslint-disable-next-line
  }, [messages, loading, currentChatId]);

  // –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∞–Ω–º–∞—É–Ω—Ç—ñ
  useEffect(() => {
    return () => {
      if (typingTimeout.current) clearTimeout(typingTimeout.current);
    };
  }, []);

  // –î–∏–Ω–∞–º—ñ—á–Ω–∏–π placeholder –¥–ª—è textarea
  const placeholders = [
    "How can I improve my Google Ads campaign?",
    "Why is my CPA so high?",
    "Show me insights for my last 30 days",
    "What's wrong with my ad performance?",
    "How to optimize my budget allocation?"
  ];

  useEffect(() => {
    const interval = setInterval(() => {
      setPlaceholderIndex((prev) => (prev + 1) % placeholders.length);
    }, 4000);
    return () => clearInterval(interval);
  }, []);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —á–∞—Ç—ñ–≤ –∑ localStorage
  useEffect(() => {
    console.log('=== LOADING CHATS FROM LOCALSTORAGE ===');
    const savedChats = localStorage.getItem('ppcset-chats');
    if (savedChats) {
      const parsedChats = JSON.parse(savedChats).map((chat: any) => ({
        ...chat,
        createdAt: new Date(chat.createdAt),
        updatedAt: new Date(chat.updatedAt)
      }));
      console.log('Loaded chats:', parsedChats.length);
      setChats(parsedChats);
      
      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç
      const lastChatId = localStorage.getItem('ppcset-current-chat');
      if (lastChatId && parsedChats.find((c: Chat) => c.id === lastChatId)) {
        setCurrentChatId(lastChatId);
        const lastChat = parsedChats.find((c: Chat) => c.id === lastChatId);
        if (lastChat) {
          console.log('Restoring last chat with messages:', lastChat.messages.length);
          console.log('Last message role:', lastChat.messages[lastChat.messages.length - 1]?.role);
          console.log('All messages:', lastChat.messages.map((m: Message) => ({ role: m.role, text: m.text.slice(0, 50) + '...' })));
          console.log('Full messages:', JSON.stringify(lastChat.messages, null, 2));
          setMessages(lastChat.messages);
        }
      } else if (parsedChats.length > 0) {
        // –Ø–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —á–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –±–µ—Ä–µ–º–æ –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π
        const newestChat = parsedChats[parsedChats.length - 1];
        setCurrentChatId(newestChat.id);
        console.log('Restoring newest chat with messages:', newestChat.messages.length);
        setMessages(newestChat.messages);
      }
    } else {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä—à–∏–π —á–∞—Ç
      console.log('Creating new chat');
      createNewChat();
    }
  }, []);

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —á–∞—Ç—ñ–≤ —É localStorage
  useEffect(() => {
    if (chats.length > 0) {
      localStorage.setItem('ppcset-chats', JSON.stringify(chats));
    }
  }, [chats]);

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Ç—É
  useEffect(() => {
    if (currentChatId) {
      localStorage.setItem('ppcset-current-chat', currentChatId);
    }
  }, [currentChatId]);

  const createNewChat = () => {
    const newChat: Chat = {
      id: Date.now().toString(),
      title: 'New chat',
      messages: [],
      createdAt: new Date(),
      updatedAt: new Date()
    };
    setChats(prev => [...prev, newChat]);
    setCurrentChatId(newChat.id);
    setMessages([]);
    setInput('');
    setError(null);
    
    // –û—á–∏—â–∞—î–º–æ shownMessages –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ —á–∞—Ç—É
    setShownMessages(new Set());
    if (typeof window !== 'undefined') {
      window.localStorage.setItem('chatTypedMessages', JSON.stringify([]));
    }
  };

  const selectChat = (chatId: string) => {
    console.log('=== SELECT CHAT CALLED ===');
    console.log('Chat ID:', chatId);
    
    // –ó—É–ø–∏–Ω—è—î–º–æ typing effect –ø—Ä–∏ –∑–º—ñ–Ω—ñ —á–∞—Ç—É
    if (typingTimeout.current) {
      console.log('=== STOPPING TYPING EFFECT ON CHAT SWITCH ===');
      clearTimeout(typingTimeout.current);
      typingInterrupted.current = true;
      setTypingText(null);
      typingTextRef.current = null;
    }
    
    const chat = chats.find(c => c.id === chatId);
    if (chat) {
      console.log('Chat messages:', chat.messages.length);
      console.log('Last message role:', chat.messages[chat.messages.length - 1]?.role);
      setCurrentChatId(chatId);
      setMessages(chat.messages);
      setInput('');
      setError(null);
      setShowSidebar(false); // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ sidebar –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö
    }
  };

  const deleteChat = (chatId: string) => {
    setChats(prev => prev.filter(c => c.id !== chatId));
    
    // –û—á–∏—â–∞—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏ –∑ shownMessages –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–æ–≥–æ —á–∞—Ç—É
    setShownMessages(prev => {
      const newSet = new Set(Array.from(prev).filter(id => !id.startsWith(chatId + '-')));
      if (typeof window !== 'undefined') {
        window.localStorage.setItem('chatTypedMessages', JSON.stringify(Array.from(newSet)));
      }
      return newSet;
    });
    
    if (currentChatId === chatId) {
      if (chats.length > 1) {
        const remainingChats = chats.filter(c => c.id !== chatId);
        const lastChat = remainingChats[remainingChats.length - 1];
        setCurrentChatId(lastChat.id);
        setMessages(lastChat.messages);
      } else {
        createNewChat();
      }
    }
  };

  const updateChatTitle = (chatId: string, title: string) => {
    setChats(prev => prev.map(c => 
      c.id === chatId ? { ...c, title, updatedAt: new Date() } : c
    ));
    setEditingChatId(null);
    setEditingTitle('');
  };

  // –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è —á–∞—Ç—ñ–≤ –ø–æ –ø–æ—à—É–∫–æ–≤–æ–º—É –∑–∞–ø–∏—Ç—É
  const filteredChats = chats.filter(chat => 
    chat.title.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // –ó–∞–∫—Ä–∏—Ç–∏ –º–µ–Ω—é –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
  useEffect(() => {
    const handleClickOutside = (e: MouseEvent) => {
      if (openMenuId && !(e.target as Element).closest('.chat-menu')) {
        setOpenMenuId(null);
      }
      if (showReportTemplates && !(e.target as Element).closest('[data-report-templates]')) {
        setShowReportTemplates(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [openMenuId, showReportTemplates]);

  const handleSubmit = async (e: React.FormEvent) => {
    console.log('=== HANDLE SUBMIT CALLED ===');
    console.log('Event type:', e.type);
    console.log('Input value:', input);
    console.log('Input length:', input.length);
    console.log('Loading state:', loading);
    console.log('Messages count:', messages.length);
    console.log('Stack trace:', new Error().stack);
    
    e.preventDefault();
    if (!input.trim()) return;
    setError(null);
    setLoading(true);
    let question = input;
    // –Ø–∫—â–æ –æ–±—Ä–∞–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–∞–Ω—ñ Google Ads ‚Äî –¥–æ–¥–∞—î–º–æ —ó—Ö —É prompt
    if (useAdsData) {
      const dataToUse = realAdsData || adsData; // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —Ä–µ–∞–ª—å–Ω–∏–º –¥–∞–Ω–∏–º
      if (dataToUse) {
        // –§–æ—Ä–º—É—î–º–æ –ª—é–¥—è–Ω–∏–π summary –¥–ª—è prompt
        const total = dataToUse.total;
        const campaigns = dataToUse.campaigns.map((c: any) =>
          `- ${c.name} (${c.status}): –≤–∏—Ç—Ä–∞—Ç–∏ $${c.cost}, –∫–ª—ñ–∫–∏ ${c.clicks}, –ø–æ–∫–∞–∑–∏ ${c.impressions}, –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó ${c.conversions}, CTR ${c.ctr}%, CPC $${c.cpc}, CR ${c.conversion_rate}%`
        ).join('\n');
        const dataSource = realAdsData ? '—Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∑ –≤–∞—à–æ–≥–æ Google Ads –∞–∫–∞—É–Ω—Ç—É' : '—Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏';
        const summary = `–£ –º–æ—î–º—É –∞–∫–∞—É–Ω—Ç—ñ Google Ads –∑–∞ ${dataToUse.date_range} (${dataSource}):
–í—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—Ç–∏: $${total.cost}, –∫–ª—ñ–∫–∏: ${total.clicks}, –ø–æ–∫–∞–∑–∏: ${total.impressions}, –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó: ${total.conversions}, CTR: ${total.ctr}%, CPC: $${total.cpc}, CR: ${total.conversion_rate}%.
–ö–∞–º–ø–∞–Ω—ñ—ó:\n${campaigns}`;
        question = `${summary}\n${input}\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–∞–Ω—ñ –≤–∏—â–µ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É. –£ –∫–æ–∂–Ω–æ–º—É –∫—Ä–æ—Ü—ñ –ø–æ—Å–∏–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫–∞–º–ø–∞–Ω—ñ—ó, —Ü–∏—Ñ—Ä–∏, –º–µ—Ç—Ä–∏–∫–∏ –∑ —Ü–∏—Ö –¥–∞–Ω–∏—Ö. –î–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑ –æ–ø–æ—Ä–æ—é –Ω–∞ —Ñ–∞–∫—Ç–∏—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏. –ù–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π summary —ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.`;
      }
    }
    const userMessage: Message = { 
      role: 'user', 
      text: input,
      image: imagePreview || undefined
    };
    setMessages((prev) => [...prev, userMessage]);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Ç
    if (currentChatId) {
      const updatedMessages = [...messages, userMessage];
      setChats(prev => prev.map(c => 
        c.id === currentChatId 
          ? { 
              ...c, 
              messages: updatedMessages,
              title: c.title === 'New chat' ? input.slice(0, 30) + (input.length > 30 ? '...' : '') : c.title,
              updatedAt: new Date()
            }
          : c
      ));
    }
    
    setInput(''); // –û—á–∏—â–∞—é –ø–æ–ª–µ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è submit
    setSelectedImage(null); // –û—á–∏—â–∞—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    setImagePreview(null); // –û—á–∏—â–∞—é preview
    if (inputRef.current) {
      inputRef.current.style.height = '40px';
    }
    try {
      const res = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          question,
          image: imagePreview // –î–æ–¥–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–æ –∑–∞–ø–∏—Ç—É
        }),
      });
      if (!res.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI');
      const data = await res.json();
      const aiMessage: Message = { role: 'ai', text: data.answer };
      setMessages((prev) => [...prev, aiMessage]);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Ç –∑ AI –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é
      if (currentChatId) {
        const updatedMessages: Message[] = [...messages, userMessage, aiMessage];
        setChats(prev => prev.map(c => 
          c.id === currentChatId 
            ? { ...c, messages: updatedMessages, updatedAt: new Date() }
            : c
        ));
      }
    } catch (err: any) {
      setError(err.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  const handleClear = () => {
    setMessages([]);
    setError(null);
    setInput('');
    // –û—á–∏—â–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Ç
    if (currentChatId) {
      setChats(prev => prev.map(c => 
        c.id === currentChatId 
          ? { ...c, messages: [], updatedAt: new Date() }
          : c
      ));
    }
    inputRef.current?.focus();
  };

  // –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  const handleContinue = async () => {
    console.log('=== HANDLE CONTINUE CALLED ===');
    setError(null);
    setLoading(true);
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è (–ø–µ—Ä—à–∏–π user)
    const originalUserMsg = messages.find(m => m.role === 'user')?.text || '';
    // –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI
    const lastAiMsg = messages.filter(m => m.role === 'ai').slice(-1)[0]?.text || '';
    try {
      const res = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          question: `–û—Å—å –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è: ${originalUserMsg}\n–û—Å—å –ø–æ–ø–µ—Ä–µ–¥–Ω—è —á–∞—Å—Ç–∏–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:\n${lastAiMsg}\n–ü—Ä–æ–¥–æ–≤–∂—É–π –∑ —Ç–æ–≥–æ –º—ñ—Å—Ü—è, –¥–µ –∑—É–ø–∏–Ω–∏–≤—Å—è, –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–π –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–µ–∫—Å—Ç.`
        }),
      });
      if (!res.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI');
      const data = await res.json();
      setMessages((prev) => [...prev, { role: 'ai', text: data.answer }]);
    } catch (err: any) {
      setError(err.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É –∑–∞ —à–∞–±–ª–æ–Ω–æ–º
  const createReportFromTemplate = async (reportType: ReportType, autoConnect: boolean = false) => {
    console.log('=== CREATE REPORT FROM TEMPLATE ===');
    console.log('Report type:', reportType);
    console.log('Auto connect:', autoConnect);
    
    const template = REPORT_TEMPLATES[reportType];
    if (!template) {
      setError('–®–∞–±–ª–æ–Ω –∑–≤—ñ—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    setError(null);
    setLoading(true);
    setShowReportTemplates(false);

    // –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å –¥–∞–Ω–∏—Ö —á–µ—Ä–µ–∑ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é
    let dataStatus = getDataStatus();
    
    // –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö —ñ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
    if (!dataStatus.hasData && autoConnect) {
      console.log('Attempting auto connect...');
      const connected = await autoConnectToGoogleAds();
      if (connected) {
        // –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–µ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
        await new Promise(resolve => setTimeout(resolve, 200));
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        dataStatus = getDataStatus();
        console.log('Auto connect successful, data status:', dataStatus);
      }
    }
    
    let question: string;
    
    if (!dataStatus.hasData) {
      // –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö - —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
      question = `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–≤—ñ—Ç "${template.name}", –∞–ª–µ –Ω–µ –Ω–∞–¥–∞–≤ –¥–∞–Ω—ñ Google Ads.

–°—Ç–≤–æ—Ä–∏ –¥—Ä—É–∂–Ω—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é:

üìä ${template.name.toUpperCase()} - –ü–Ü–î–ì–û–¢–û–í–ö–ê

–î–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É "${template.name}" –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –¥–∞–Ω—ñ –∑ –≤–∞—à–æ–≥–æ Google Ads –∞–∫–∞—É–Ω—Ç—É.

üîó –©–û –†–û–ë–ò–¢–ò:
1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "Use Google Ads data" –≤–∏—â–µ
2. –Ø –æ—Ç—Ä–∏–º–∞—é —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
3. –ü–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å "${template.name}" –∑–Ω–æ–≤—É

üí° –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê:
–Ø–∫—â–æ —É –≤–∞—Å —î —Ä–µ–∞–ª—å–Ω–∏–π Google Ads –∞–∫–∞—É–Ω—Ç:
- –ü—ñ–¥–∫–ª—é—á—ñ—Ç—å –π–æ–≥–æ —á–µ—Ä–µ–∑ OAuth2
- –Ø –æ—Ç—Ä–∏–º–∞—é —Å–ø—Ä–∞–≤–∂–Ω—ñ –¥–∞–Ω—ñ –∑ –≤–∞—à–æ–≥–æ –∫–∞–±—ñ–Ω–µ—Ç—É

üöÄ –í –ú–ê–ô–ë–£–¢–ù–¨–û–ú–£:
–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–∫–ª—é—á–∞—Ç–∏—Å—è –¥–æ –≤–∞—à–æ–≥–æ Google Ads –∞–∫–∞—É–Ω—Ç—É –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —à–∞–±–ª–æ–Ω—É –∑–≤—ñ—Ç—É.

–ü—ñ—Å–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —è —Å—Ç–≤–æ—Ä—é –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑:
‚Ä¢ –†–µ–∞–ª—å–Ω–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ –≤–∞—à–∏—Ö –∫–∞–º–ø–∞–Ω—ñ–π
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏
‚Ä¢ ${template.description}

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –µ–º–æ–¥–∑—ñ —Ç–∞ –¥—Ä—É–∂–Ω—ñ–π —Ç–æ–Ω.`;
    } else {
      // –Ø–∫—â–æ —î –¥–∞–Ω—ñ - —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–≤—ñ—Ç
      const dataToUse = realAdsData || adsData;
      const total = dataToUse.total;
      const campaigns = dataToUse.campaigns.map((c: any) =>
        `- ${c.name} (${c.status}): –≤–∏—Ç—Ä–∞—Ç–∏ $${c.cost}, –∫–ª—ñ–∫–∏ ${c.clicks}, –ø–æ–∫–∞–∑–∏ ${c.impressions}, –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó ${c.conversions}, CTR ${c.ctr}%, CPC $${c.cpc}, CR ${c.conversion_rate}%`
      ).join('\n');
      const dataSource = realAdsData ? '—Ä–µ–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏ –∑ –≤–∞—à–æ–≥–æ Google Ads –∞–∫–∞—É–Ω—Ç—É' : '—Ç–µ—Å—Ç–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏';
      const summary = `–£ –º–æ—î–º—É –∞–∫–∞—É–Ω—Ç—ñ Google Ads –∑–∞ ${dataToUse.date_range} (${dataSource}):
–í—Å—å–æ–≥–æ –≤–∏—Ç—Ä–∞—Ç–∏: $${total.cost}, –∫–ª—ñ–∫–∏: ${total.clicks}, –ø–æ–∫–∞–∑–∏: ${total.impressions}, –∫–æ–Ω–≤–µ—Ä—Å—ñ—ó: ${total.conversions}, CTR: ${total.ctr}%, CPC: $${total.cpc}, CR: ${total.conversion_rate}%.
–ö–∞–º–ø–∞–Ω—ñ—ó:\n${campaigns}`;
      question = `${summary}\n\n${template.prompt}\n\n–í–ê–ñ–õ–ò–í–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò –Ω–∞–¥–∞–Ω—ñ –¥–∞–Ω—ñ –≤–∏—â–µ. –ù–µ –≤–∏–≥–∞–¥—É–π —Ü–∏—Ñ—Ä–∏. –£ –∫–æ–∂–Ω–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ –ø–æ—Å–∏–ª–∞–π—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –∫–∞–º–ø–∞–Ω—ñ—ó, —Ü–∏—Ñ—Ä–∏, –º–µ—Ç—Ä–∏–∫–∏ –∑ —Ü–∏—Ö –¥–∞–Ω–∏—Ö. –î–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑ –æ–ø–æ—Ä–æ—é –Ω–∞ —Ñ–∞–∫—Ç–∏—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏.`;
    }

    const userMessage: Message = { 
      role: 'user', 
      text: `–°—Ç–≤–æ—Ä–∏ –∑–≤—ñ—Ç: ${template.name}`,
      image: imagePreview || undefined
    };
    setMessages((prev) => [...prev, userMessage]);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Ç
    if (currentChatId) {
      const updatedMessages = [...messages, userMessage];
      setChats(prev => prev.map(c => 
        c.id === currentChatId 
          ? { 
              ...c, 
              messages: updatedMessages,
              title: c.title === 'New chat' ? template.name : c.title,
              updatedAt: new Date()
            }
          : c
      ));
    }
    
    setInput('');
    setSelectedImage(null);
    setImagePreview(null);
    if (inputRef.current) {
      inputRef.current.style.height = '40px';
    }

    try {
      const res = await fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          question,
          image: imagePreview
        }),
      });
      if (!res.ok) throw new Error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ AI');
      const data = await res.json();
      const aiMessage: Message = { role: 'ai', text: data.answer };
      setMessages((prev) => [...prev, aiMessage]);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Ç –∑ AI –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é
      if (currentChatId) {
        const updatedMessages: Message[] = [...messages, userMessage, aiMessage];
        setChats(prev => prev.map(c => 
          c.id === currentChatId 
            ? { ...c, messages: updatedMessages, updatedAt: new Date() }
            : c
        ));
      }
    } catch (err: any) {
      setError(err.message || '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞');
    } finally {
      setLoading(false);
    }
  };

  // –î–æ–¥–∞—é —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É
  const testClick = () => {
    console.log('=== TEST CLICK FUNCTION CALLED ===');
    alert('Test click works!');
  };

  const exportTxt = async (text: string) => {
    console.log('=== EXPORT TXT FUNCTION CALLED ===');
    console.log('Text to export:', text);
    console.log('Text length:', text.length);
    try {
      console.log('Starting TXT export...');
      const res = await fetch('/api/export-txt', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text }),
      });
      
      console.log('Response status:', res.status);
      console.log('Response headers:', res.headers);
      
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      
      const blob = await res.blob();
      console.log('Blob size:', blob.size);
      console.log('Blob type:', blob.type);
      
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `chat-export-${new Date().toISOString().replace(/[:.]/g, '-')}.txt`;
      a.style.display = 'none';
      
      console.log('Adding link to DOM...');
      document.body.appendChild(a);
      
      console.log('Clicking link...');
      a.click();
      
      console.log('Cleaning up...');
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      console.log('TXT export completed successfully');
      return true; // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    } catch (error) {
      console.error('Export TXT error:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ —Ñ–∞–π–ª—É: ' + (error instanceof Error ? error.message : String(error)));
      return false; // –û—à–∏–±–∫–∞
    }
  };

  const exportCsv = async (rows: string[][]) => {
    console.log('=== EXPORT CSV FUNCTION CALLED ===');
    console.log('Rows to export:', rows);
    console.log('Rows count:', rows.length);
    try {
      // Convert rows array to data format expected by API
      const data = rows.map(row => {
        const obj: any = {};
        row.forEach((value, index) => {
          obj[`Column${index + 1}`] = value;
        });
        return obj;
      });
      
      console.log('Converted data:', data);
      
      const res = await fetch('/api/export-csv', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ data, filename: 'chat-export' }),
      });
      
      console.log('CSV Response status:', res.status);
      console.log('CSV Response headers:', res.headers);
      
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      
      const blob = await res.blob();
      console.log('CSV Blob size:', blob.size);
      console.log('CSV Blob type:', blob.type);
      
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `chat-export-${new Date().toISOString().replace(/[:.]/g, '-')}.csv`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      console.log('CSV export completed successfully');
    } catch (error) {
      console.error('Export CSV error:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ —Ñ–∞–π–ª—É');
    }
  };

  const exportPdf = async (text: string) => {
    console.log('=== EXPORT PDF FUNCTION CALLED ===');
    console.log('Text to export:', text);
    console.log('Text length:', text.length);
    try {
      console.log('Starting PDF export...');
      const res = await fetch('/api/export-pdf', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ text, title: 'AI Chat Export' }),
      });
      
      console.log('PDF Response status:', res.status);
      console.log('PDF Response headers:', res.headers);
      
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      
      const blob = await res.blob();
      console.log('PDF Blob size:', blob.size);
      console.log('PDF Blob type:', blob.type);
      
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `chat-export-${new Date().toISOString().replace(/[:.]/g, '-')}.pdf`;
      a.style.display = 'none';
      
      console.log('Adding link to DOM...');
      document.body.appendChild(a);
      
      console.log('Clicking link...');
      a.click();
      
      console.log('Cleaning up...');
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      console.log('PDF export completed successfully');
      return true;
    } catch (error) {
      console.error('Export PDF error:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ —Ñ–∞–π–ª—É: ' + (error instanceof Error ? error.message : String(error)));
      return false;
    }
  };

  const exportJson = async (text: string) => {
    console.log('=== EXPORT JSON FUNCTION CALLED ===');
    console.log('Text to export:', text);
    console.log('Text length:', text.length);
    try {
      console.log('Starting JSON export...');
      const res = await fetch('/api/export-json', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          text, 
          title: 'AI Chat Export',
          metadata: {
            source: 'PPCSet Chat',
            exportType: 'AI Response'
          }
        }),
      });
      
      console.log('JSON Response status:', res.status);
      console.log('JSON Response headers:', res.headers);
      
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      
      const blob = await res.blob();
      console.log('JSON Blob size:', blob.size);
      console.log('JSON Blob type:', blob.type);
      
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `chat-export-${new Date().toISOString().replace(/[:.]/g, '-')}.json`;
      a.style.display = 'none';
      
      console.log('Adding link to DOM...');
      document.body.appendChild(a);
      
      console.log('Clicking link...');
      a.click();
      
      console.log('Cleaning up...');
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      console.log('JSON export completed successfully');
      return true;
    } catch (error) {
      console.error('Export JSON error:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ —Ñ–∞–π–ª—É: ' + (error instanceof Error ? error.message : String(error)));
      return false;
    }
  };

  const exportXlsx = async (rows: string[][]) => {
    console.log('=== EXPORT XLSX FUNCTION CALLED ===');
    console.log('Rows to export:', rows);
    try {
      // Convert rows array to data format expected by API
      const data = rows.map(row => {
        const obj: any = {};
        row.forEach((value, index) => {
          obj[`Column${index + 1}`] = value;
        });
        return obj;
      });
      
      const res = await fetch('/api/export-xlsx', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ data, filename: 'chat-export' }),
      });
      
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      
      const blob = await res.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `chat-export-${new Date().toISOString().replace(/[:.]/g, '-')}.xlsx`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      
      console.log('XLSX export completed successfully');
    } catch (error) {
      console.error('Export XLSX error:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ Excel-—Ñ–∞–π–ª—É');
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∏–ø —Ñ–∞–π–ª—É
      if (!file.type.startsWith('image/')) {
        alert('Please select an image file');
        return;
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É (–º–∞–∫—Å–∏–º—É–º 5MB)
      if (file.size > 5 * 1024 * 1024) {
        alert('Image size should be less than 5MB');
        return;
      }

      setSelectedImage(file);
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ preview
      const reader = new FileReader();
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const removeImage = () => {
    setSelectedImage(null);
    setImagePreview(null);
  };

  return (
    <div style={{
      display: 'flex',
      height: '100vh',
      width: '100vw',
      fontFamily: 'Inter, SF Pro Display, Segoe UI, Arial, sans-serif',
    }}>
      {/* Narrow sidebar background - visible only when sidebar is closed */}
      {!showSidebar && (
        <div style={{
          position: 'fixed',
          left: 0,
          top: 0,
          width: '70px',
          height: '100vh',
          background: '#23272f',
          borderRight: '1px solid #1a1a1a',
          zIndex: 150,
        }} />
      )}

      {/* Fixed hamburger button - always visible */}
      <button
        onClick={() => setShowSidebar(!showSidebar)}
        style={{
          position: 'fixed',
          left: '16px',
          top: '16px',
          background: '#23272f',
          border: '1px solid #1a1a1a',
          color: '#fff',
          fontSize: 20,
          cursor: 'pointer',
          padding: '8px',
          borderRadius: 6,
          transition: 'all 0.2s',
          zIndex: 200,
          boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
        }}
        title={showSidebar ? 'Hide chat history' : 'Show chat history'}
        onMouseEnter={(e) => {
          e.currentTarget.style.color = '#00ffe7';
          e.currentTarget.style.background = '#1a1a1a';
          e.currentTarget.style.border = '1px solid #00ffe7';
        }}
        onMouseLeave={(e) => {
          e.currentTarget.style.color = '#fff';
          e.currentTarget.style.background = '#23272f';
          e.currentTarget.style.border = '1px solid #1a1a1a';
        }}
      >
        ‚ò∞
      </button>

      {/* New chat button (pencil) - visible only when sidebar is closed */}
      {!showSidebar && (
        <button
          onClick={createNewChat}
          style={{
            position: 'fixed',
            left: '16px',
            top: '60px',
            background: '#23272f',
            border: '1px solid #1a1a1a',
            color: '#fff',
            fontSize: 16,
            cursor: 'pointer',
            padding: '8px',
            borderRadius: 6,
            transition: 'all 0.2s',
            zIndex: 200,
            boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
          title="New chat"
          onMouseEnter={(e) => {
            e.currentTarget.style.color = '#00ffe7';
            e.currentTarget.style.background = '#1a1a1a';
            e.currentTarget.style.border = '1px solid #00ffe7';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.color = '#fff';
            e.currentTarget.style.background = '#23272f';
            e.currentTarget.style.border = '1px solid #1a1a1a';
          }}
        >
          ‚úèÔ∏è
        </button>
      )}

      {/* Sidebar */}
      <div style={{
        width: showSidebar ? 280 : 0,
        background: '#23272f',
        borderRight: '1px solid #1a1a1a',
        transition: 'width 0.3s ease',
        overflow: 'hidden',
        display: 'flex',
        flexDirection: 'column',
        position: 'fixed',
        left: 0,
        top: 0,
        height: '100vh',
        zIndex: 100,
      }}>
        <div style={{
          padding: '12px 16px 20px 16px',
          borderBottom: '1px solid #1a1a1a',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'flex-end',
        }}>
          <button
            onClick={createNewChat}
            style={{
              background: 'rgba(255,255,255,0.03)',
              color: '#fff',
              border: '1.5px solid rgba(255,255,255,0.08)',
              borderRadius: 12,
              padding: '16px 24px',
              fontSize: 14,
              fontWeight: 600,
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              boxShadow: 'none',
            }}
            onMouseEnter={e => {
              e.currentTarget.style.background = 'rgba(255,255,255,0.1)';
              e.currentTarget.style.color = '#fff';
              e.currentTarget.style.border = '1.5px solid rgba(255,255,255,0.2)';
              e.currentTarget.style.boxShadow = '0 4px 12px rgba(255,255,255,0.1)';
            }}
            onMouseLeave={e => {
              e.currentTarget.style.background = 'rgba(255,255,255,0.03)';
              e.currentTarget.style.color = '#fff';
              e.currentTarget.style.border = '1.5px solid rgba(255,255,255,0.08)';
              e.currentTarget.style.boxShadow = 'none';
            }}
          >
            New Chat
          </button>
        </div>
        <div style={{
          padding: '12px 16px',
          borderBottom: '1px solid #1a1a1a',
        }}>
          <input
            type="text"
            placeholder="Search chats..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            style={{
              width: '100%',
              padding: '8px 12px',
              border: '1px solid #1a1a1a',
              borderRadius: 6,
              fontSize: 14,
              background: '#1a1a1a',
              color: '#fff',
              outline: 'none',
            }}
            onFocus={e => {
              e.target.style.border = '1px solid #7f9cf5';
              e.target.style.boxShadow = '0 0 0 2px rgba(127, 156, 245, 0.2)';
            }}
            onBlur={e => {
              e.target.style.border = '1px solid #1a1a1a';
              e.target.style.boxShadow = 'none';
            }}
          />
        </div>
        <div style={{
          flex: 1,
          overflowY: 'auto',
          padding: '8px',
        }}>
          {filteredChats.map((chat) => (
            <div
              key={chat.id}
              style={{
                padding: '12px 16px',
                margin: '4px 0',
                borderRadius: 8,
                background: currentChatId === chat.id ? '#1a1a1a' : 'transparent',
                border: currentChatId === chat.id ? '1px solid #7f9cf5' : '1px solid transparent',
                cursor: 'pointer',
                transition: 'all 0.2s',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
              }}
              onClick={() => selectChat(chat.id)}
              onMouseEnter={e => {
                if (currentChatId !== chat.id) {
                  e.currentTarget.style.background = '#1a1a1a';
                  e.currentTarget.style.border = '1px solid #00ffe7';
                }
              }}
              onMouseLeave={e => {
                if (currentChatId !== chat.id) {
                  e.currentTarget.style.background = 'transparent';
                  e.currentTarget.style.border = '1px solid transparent';
                }
              }}
            >
              <div style={{ flex: 1, minWidth: 0 }}>
                {editingChatId === chat.id ? (
                  <input
                    type="text"
                    value={editingTitle}
                    onChange={(e) => setEditingTitle(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        updateChatTitle(chat.id, editingTitle);
                      } else if (e.key === 'Escape') {
                        setEditingChatId(null);
                        setEditingTitle('');
                      }
                    }}
                    onBlur={() => {
                      if (editingTitle.trim()) {
                        updateChatTitle(chat.id, editingTitle);
                      } else {
                        setEditingChatId(null);
                        setEditingTitle('');
                      }
                    }}
                    style={{
                      width: '100%',
                      padding: '4px 8px',
                      border: '1px solid #7f9cf5',
                      borderRadius: 4,
                      fontSize: 14,
                      fontWeight: 600,
                      background: '#fff',
                      color: '#23272f',
                      outline: 'none',
                    }}
                    autoFocus
                  />
                ) : (
                  <div style={{
                    fontWeight: 600,
                    fontSize: 14,
                    color: '#fff',
                    marginBottom: 4,
                    whiteSpace: 'nowrap',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                  }}>
                    {chat.title}
                  </div>
                )}
                <div style={{
                  fontSize: 12,
                  color: '#a0a0a0',
                  whiteSpace: 'nowrap',
                  overflow: 'hidden',
                  textOverflow: 'ellipsis',
                }}>
  
                </div>
              </div>
              <div style={{ position: 'relative' }} className="chat-menu">
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    setOpenMenuId(openMenuId === chat.id ? null : chat.id);
                  }}
                  style={{
                    background: 'none',
                    border: 'none',
                    color: '#a0a0a0',
                    fontSize: 16,
                    cursor: 'pointer',
                    padding: '4px 8px',
                    borderRadius: 4,
                    transition: 'all 0.2s',
                    marginLeft: 8,
                  }}
                  title="More options"
                  onMouseEnter={e => {
                    e.currentTarget.style.color = '#00ffe7';
                  }}
                  onMouseLeave={e => {
                    e.currentTarget.style.color = '#a0a0a0';
                  }}
                >
                  ‚ãØ
                </button>
                {openMenuId === chat.id && (
                  <div style={{
                    position: 'absolute',
                    top: '100%',
                    right: 0,
                    background: '#1a1a1a',
                    border: '1px solid #7f9cf5',
                    borderRadius: 6,
                    boxShadow: '0 4px 12px rgba(127, 156, 245, 0.3)',
                    zIndex: 1000,
                    minWidth: 120,
                    marginTop: 4,
                  }}>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        setEditingChatId(chat.id);
                        setEditingTitle(chat.title);
                        setOpenMenuId(null);
                      }}
                      style={{
                        width: '100%',
                        padding: '8px 12px',
                        background: 'none',
                        border: 'none',
                        textAlign: 'left',
                        fontSize: 14,
                        color: '#fff',
                        cursor: 'pointer',
                        transition: 'all 0.2s',
                      }}
                      onMouseEnter={e => {
                        e.currentTarget.style.background = '#7f9cf5';
                        e.currentTarget.style.color = '#fff';
                      }}
                      onMouseLeave={e => {
                        e.currentTarget.style.background = 'none';
                        e.currentTarget.style.color = '#fff';
                      }}
                    >
                      Rename
                    </button>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        deleteChat(chat.id);
                        setOpenMenuId(null);
                      }}
                      style={{
                        width: '100%',
                        padding: '8px 12px',
                        background: 'none',
                        border: 'none',
                        textAlign: 'left',
                        fontSize: 14,
                        color: '#ff6b6b',
                        cursor: 'pointer',
                        transition: 'all 0.2s',
                      }}
                      onMouseEnter={e => {
                        e.currentTarget.style.background = '#ff6b6b';
                        e.currentTarget.style.color = '#fff';
                      }}
                      onMouseLeave={e => {
                        e.currentTarget.style.background = 'none';
                        e.currentTarget.style.color = '#ff6b6b';
                      }}
                    >
                      Delete
                    </button>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Main chat area */}
      <div style={{
        flex: 1,
        display: 'flex',
        justifyContent: 'center',
        paddingLeft: showSidebar ? '280px' : '0',
        transition: 'padding-left 0.3s ease',
      }}>
        <div className="chat-root" style={{
          maxWidth: '900px',
          width: '100%',
          background: '#1a1a1a',
          borderRadius: 0,
          boxShadow: showSidebar ? 'none' : '0 4px 32px rgba(0,0,0,0.3)',
          border: '1px solid #23272f',
          minHeight: 480,
          display: 'flex',
          flexDirection: 'column',
          transition: 'all 0.3s ease',
          padding: '0 16px',
          boxSizing: 'border-box',
        }}>
      {/* Top bar */}
      <div style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        padding: '22px 48px 12px 48px',
        borderBottom: '1px solid #23272f',
        background: '#23272f',
        borderTopLeftRadius: 0,
        borderTopRightRadius: 0,
      }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: 16 }}>
          <span style={{ fontWeight: 700, fontSize: 20, color: '#fff', letterSpacing: '-0.5px' }}>
            PPCSet AI
          </span>
        </div>
        {/* –£ top bar –≤–∏–¥–∞–ª—è—é –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–º–∏–∫–∞—á–∞ —Ç–µ–º–∏ (—ñ–∫–æ–Ω–∫–∞ ‚òÄÔ∏è/üåô) */}
        <div style={{ display: 'flex', gap: 10, alignItems: 'center' }}>
          {/* Theme toggle */}
          
          <button
            onClick={() => setShowAccountModal(true)}
            style={{
              background: accountConnected ? '#e6f7ff' : '#fff',
              color: accountConnected ? '#0ea5e9' : '#23272f',
              border: '1.5px solid #0ea5e9',
              borderRadius: 8,
              padding: '6px 18px',
              fontSize: 15,
              fontWeight: 600,
              cursor: 'pointer',
              boxShadow: '0 2px 8px rgba(0,0,0,0.03)',
              marginRight: 8,
              transition: 'background 0.2s',
              display: 'flex',
              alignItems: 'center',
              gap: 8
            }}
            title={accountConnected ? 'Google Ads account connected' : 'Connect Google Ads account'}
          >
            <svg width="20" height="20" viewBox="0 0 20 20" fill="none" style={{ marginRight: 4 }}>
              <circle cx="10" cy="10" r="9" stroke="#0ea5e9" strokeWidth="2" fill={accountConnected ? '#0ea5e9' : 'none'} />
              <path d="M6 10l2.5 2.5L14 7" stroke="#fff" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" style={{ opacity: accountConnected ? 1 : 0 }} />
            </svg>
            {accountConnected ? 'Google Ads account connected' : 'Connect Google Ads account'}
          </button>
          {(adsData || realAdsData) && (
            <button
              onClick={() => setUseAdsData(v => !v)}
              style={{
                background: useAdsData ? '#0ea5e9' : '#e6f7ff',
                color: useAdsData ? '#fff' : '#23272f',
                border: '1.5px solid #0ea5e9',
                borderRadius: 8,
                padding: '6px 18px',
                fontSize: 15,
                fontWeight: 600,
                cursor: 'pointer',
                boxShadow: '0 2px 8px rgba(0,0,0,0.03)',
                marginRight: 8,
                transition: 'background 0.2s',
              }}
              title={realAdsData ? "Add real Google Ads data to question" : "Add test Google Ads data to question"}
            >
              {useAdsData ? (realAdsData ? 'Real Google Ads data added' : 'Google Ads data added') : (realAdsData ? 'Use real Google Ads data' : 'Use Google Ads data')}
            </button>
          )}
          <button onClick={handleClear} style={{
            background: 'none',
            border: 'none',
            color: '#888',
            fontSize: 15,
            cursor: 'pointer',
            padding: '4px 10px',
            borderRadius: 8,
            transition: 'background 0.2s',
          }} title="Clear chat">
            Clear chat
          </button>
          <button data-report-templates onClick={() => setShowReportTemplates(!showReportTemplates)} style={{
            background: 'none',
            border: 'none',
            color: '#888',
            fontSize: 15,
            cursor: 'pointer',
            padding: '4px 10px',
            borderRadius: 8,
            transition: 'background 0.2s',
          }} title="Report templates">
            üìä Templates
          </button>
        </div>
        
        {/* Dropdown –º–µ–Ω—é —à–∞–±–ª–æ–Ω—ñ–≤ –∑–≤—ñ—Ç—ñ–≤ */}
        {showReportTemplates && (
          <div data-report-templates style={{
            position: 'absolute',
            top: '100%',
            left: '48px',
            right: '48px',
            background: '#fff',
            border: '1px solid #e2e8f0',
            borderRadius: 12,
            boxShadow: '0 4px 20px rgba(0,0,0,0.1)',
            zIndex: 1000,
            padding: '16px',
            marginTop: '8px',
          }}>
            <div style={{
              display: 'grid',
              gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))',
              gap: '12px',
            }}>
              {Object.values(REPORT_TEMPLATES).map((template) => (
                                  <button
                    key={template.id}
                    onClick={() => createReportFromTemplate(template.id as ReportType, false)}
                    disabled={loading}
                  style={{
                    background: '#f8fafc',
                    border: '1px solid #e2e8f0',
                    borderRadius: 10,
                    padding: '16px',
                    cursor: loading ? 'not-allowed' : 'pointer',
                    transition: 'all 0.2s',
                    textAlign: 'left',
                    display: 'flex',
                    flexDirection: 'column',
                    gap: '8px',
                    opacity: loading ? 0.6 : 1,
                  }}
                  onMouseEnter={(e) => {
                    if (!loading) {
                      e.currentTarget.style.background = '#e6f7ff';
                      e.currentTarget.style.border = '1px solid #0ea5e9';
                    }
                  }}
                  onMouseLeave={(e) => {
                    if (!loading) {
                      e.currentTarget.style.background = '#f8fafc';
                      e.currentTarget.style.border = '1px solid #e2e8f0';
                    }
                  }}
                >
                  <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                    <span style={{ fontSize: '20px' }}>{template.icon}</span>
                    <span style={{ 
                      fontSize: '16px', 
                      fontWeight: '600', 
                      color: '#23272f' 
                    }}>
                      {template.name}
                    </span>
                  </div>
                  <span style={{ 
                    fontSize: '14px', 
                    color: '#64748b', 
                    lineHeight: '1.4' 
                  }}>
                    {template.description}
                  </span>
                </button>
              ))}
            </div>
            <div style={{
              textAlign: 'center',
              marginTop: '12px',
              paddingTop: '12px',
              borderTop: '1px solid #e2e8f0',
              display: 'flex',
              gap: '8px',
              justifyContent: 'center',
            }}>
              <button
                onClick={() => createReportFromTemplate('campaign-analysis', true)}
                disabled={loading}
                style={{
                  background: '#e6f7ff',
                  border: '1px solid #0ea5e9',
                  color: '#0ea5e9',
                  fontSize: '14px',
                  cursor: loading ? 'not-allowed' : 'pointer',
                  padding: '6px 12px',
                  borderRadius: '6px',
                  transition: 'background 0.2s',
                  opacity: loading ? 0.6 : 1,
                }}
                onMouseEnter={(e) => {
                  if (!loading) {
                    e.currentTarget.style.background = '#0ea5e9';
                    e.currentTarget.style.color = '#fff';
                  }
                }}
                onMouseLeave={(e) => {
                  if (!loading) {
                    e.currentTarget.style.background = '#e6f7ff';
                    e.currentTarget.style.color = '#0ea5e9';
                  }
                }}
                title="–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"
              >
                üöÄ Auto Connect Test
              </button>
              <button
                onClick={() => setShowReportTemplates(false)}
                style={{
                  background: 'none',
                  border: 'none',
                  color: '#64748b',
                  fontSize: '14px',
                  cursor: 'pointer',
                  padding: '4px 8px',
                  borderRadius: '6px',
                  transition: 'background 0.2s',
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = '#f1f5f9';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = 'none';
                }}
              >
                Close
              </button>
            </div>
          </div>
        )}
      </div>
      {/* –ë–ª–æ–∫ "–î–∞–Ω—ñ Google Ads –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ" */}
      {useAdsData && (adsData || realAdsData) && (
        <div style={{
          background: realAdsData ? '#e6f7ff' : '#fff3cd',
          color: '#23272f',
          border: realAdsData ? '1.5px solid #0ea5e9' : '1.5px solid #ffc107',
          borderRadius: 12,
          margin: '0 48px 8px 48px',
          padding: '12px 18px',
          fontSize: 15,
          fontWeight: 500,
          display: 'flex',
          alignItems: 'center',
          gap: 18,
        }}>
          <span style={{ fontWeight: 600, color: realAdsData ? '#0ea5e9' : '#856404' }}>
            {realAdsData ? 'Real Google Ads data connected' : 'Test Google Ads data connected'}
          </span>
          <details style={{ flex: 1 }}>
            <summary style={{ cursor: 'pointer', color: realAdsData ? '#0ea5e9' : '#856404', fontWeight: 400, fontSize: 15 }}>
              {realAdsData ? 'View real data' : 'View test data'}
            </summary>
            <pre style={{ fontSize: 13, background: '#f9fafc', borderRadius: 8, padding: 12, marginTop: 8, overflowX: 'auto' }}>
              {JSON.stringify(realAdsData || adsData, null, 2)}
            </pre>
          </details>
        </div>
      )}
      {/* Chat history */}
      <div style={{
        flex: 1,
        minHeight: '60vh',
        maxHeight: '70vh',
        overflowY: 'auto',
        padding: '24px 0',
        background: '#f9fafc',
        borderBottomLeftRadius: 0,
        borderBottomRightRadius: 0,
        transition: 'background 0.2s',
      }}>
        {messages.length === 0 && (
          <div style={{ 
            color: '#23272f', 
            padding: '48px 24px', 
            textAlign: 'center',
            fontSize: '18px',
            fontWeight: '500',
            lineHeight: '1.5',
            maxWidth: '600px',
            margin: '0 auto',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            minHeight: '60vh',
          }}>
            <div style={{ fontSize: '28px', fontWeight: '600', color: '#7f9cf5' }}>
              Ready to boost your Google Ads performance?
            </div>
          </div>
        )}
        {messages.map((msg, idx) => (
          <div key={idx} style={{
            display: 'flex',
            flexDirection: msg.role === 'user' ? 'row-reverse' : 'row',
            alignItems: 'flex-end',
            gap: 16,
            margin: '18px 0',
            opacity: 0.98,
            animation: 'fadeIn 0.5s',
          }}>
            <div style={{ flexShrink: 0 }}>
              {msg.role === 'user' ? USER_AVATAR : AI_AVATAR}
            </div>
            <span style={{
              display: 'inline-block',
              background: msg.role === 'user' ? '#fff' : '#e6f7ff',
              color: '#23272f',
              borderRadius: 12,
              padding: '10px 18px',
              maxWidth: 600,
              wordBreak: 'break-word',
              fontSize: 15,
              lineHeight: 1.4,
              boxShadow: msg.role === 'user' ? '0 2px 8px rgba(30, 144, 255, 0.04)' : '0 2px 8px rgba(0,0,0,0.03)',
              border: msg.role === 'user' ? '1.5px solid #e2e8f0' : '1.5px solid #e6f7ff',
              transition: 'background 0.2s',
              position: 'relative',
            }}>
              {msg.role === 'ai' && idx === messages.length - 1 && typingText !== null
                ? (
                  <span>
                    <ReactMarkdown
                      components={{
                        code: (props: any) =>
                          props.inline ? (
                            <code style={{
                              background: '#f5f5f5',
                              borderRadius: 6,
                              padding: '2px 6px',
                              fontSize: 16,
                              color: '#0ea5e9',
                            }}>{props.children}</code>
                          ) : (
                            <pre style={{
                              background: '#23272f',
                              color: '#fff',
                              borderRadius: 10,
                              padding: 16,
                              overflowX: 'auto',
                              margin: '12px 0',
                            }}><code>{props.children}</code></pre>
                          ),
                        a: ({node, ...props}) => <a style={{ color: '#0ea5e9', textDecoration: 'underline' }} {...props} />,
                        li: ({node, ...props}) => <li style={{ marginLeft: 18, marginBottom: 4 }} {...props} />,
                      }}
                    >
                      {typingText}
                    </ReactMarkdown>
                    <span style={{ opacity: 0.5 }}>|</span>
                  </span>
                )
                : msg.role === 'ai'
                  ? (
                    <>
                      <ReactMarkdown
                        components={{
                          code: (props: any) =>
                            props.inline ? (
                              <code style={{
                                background: '#f5f5f5',
                                borderRadius: 6,
                                padding: '2px 6px',
                                fontSize: 16,
                                color: '#0ea5e9',
                              }}>{props.children}</code>
                            ) : (
                              <pre style={{
                                background: '#23272f',
                                color: '#fff',
                                borderRadius: 10,
                                padding: 16,
                                overflowX: 'auto',
                                margin: '12px 0',
                              }}><code>{props.children}</code></pre>
                            ),
                          a: ({node, ...props}) => <a style={{ color: '#0ea5e9', textDecoration: 'underline' }} {...props} />,
                          li: ({node, ...props}) => <li style={{ marginLeft: 18, marginBottom: 4 }} {...props} />,
                        }}
                      >
                        {msg.text}
                      </ReactMarkdown>
                      {/* Summary + Copy –¥–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó AI-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, —è–∫—â–æ –±—É–ª–∏ –¥–∞–Ω—ñ Google Ads */}
                      {idx === messages.length - 1 && useAdsData && adsData && (
                        <div style={{ display: 'flex', alignItems: 'center', gap: 12, marginTop: 10 }}>
                          <span style={{ color: '#0ea5e9', fontSize: 14, fontWeight: 500 }}>
                            –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö Google Ads
                          </span>
                          <button
                            onClick={() => {
                              navigator.clipboard.writeText(msg.text);
                              setCopied(true);
                              setTimeout(() => setCopied(false), 1200);
                            }}
                            style={{
                              background: '#e6f7ff',
                              color: '#0ea5e9',
                              border: '1.2px solid #0ea5e9',
                              borderRadius: 8,
                              padding: '4px 14px',
                              fontSize: 14,
                              fontWeight: 600,
                              cursor: 'pointer',
                              transition: 'background 0.2s',
                            }}
                            title="–°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
                          >
                            {copied ? '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!' : '–°–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å'}
                          </button>
                          {/* –ö–Ω–æ–ø–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –∑ —ñ–∫–æ–Ω–∫–æ—é —Ç–∞ dropdown */}
                          <div style={{ position: 'relative', display: 'inline-block' }}>
                            <button
                              onClick={() => setOpenExportDropdownIdx(openExportDropdownIdx === idx ? null : idx)}
                              style={{
                                background: '#f5f5f5',
                                color: '#23272f',
                                border: '1.2px solid #bdbdbd',
                                borderRadius: 8,
                                padding: '4px 14px 4px 10px',
                                fontSize: 14,
                                fontWeight: 600,
                                cursor: 'pointer',
                                display: 'flex',
                                alignItems: 'center',
                                gap: 8,
                                transition: 'background 0.2s',
                                minWidth: 44,
                              }}
                              title="–°–∫–∞—á–∞—Ç–∏ –∑–≤—ñ—Ç"
                            >
                              <span style={{display:'inline-flex',alignItems:'center',gap:6}}>
                                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="#23272f" strokeWidth="2.2" strokeLinecap="round" strokeLinejoin="round" style={{marginRight:2}}>
                                  <path d="M12 5v12"/>
                                  <path d="M6 13l6 6 6-6"/>
                                  <rect x="4" y="19" width="16" height="2" rx="1" fill="#23272f" stroke="none"/>
                                </svg>
                                <span>–°–∫–∞—á–∞—Ç–∏</span>
                              </span>
                              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#23272f" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" style={{marginLeft:4}}>
                                <path d="M6 9l6 6 6-6"/>
                              </svg>
                            </button>
                            {openExportDropdownIdx === idx && (
                              <div 
                                data-export-dropdown="true"
                                onClick={(e) => e.stopPropagation()}
                                style={{
                                  position: 'absolute',
                                  top: '110%',
                                  left: 0,
                                  background: '#fff',
                                  border: '1.2px solid #e2e8f0',
                                  borderRadius: 8,
                                  boxShadow: '0 4px 16px rgba(30,40,90,0.10)',
                                  minWidth: 140,
                                  zIndex: 100,
                                  padding: '6px 0',
                                }}
                              >
                               
                                <button
                                  onClick={(e) => { 
                                    e.stopPropagation(); 
                                    exportXlsx([["AI-–≤—ñ–¥–ø–æ–≤—ñ–¥—å"], [msg.text]]); 
                                    setOpenExportDropdownIdx(null); 
                                  }}
                                  style={{
                                    width: '100%',
                                    background: 'none',
                                    border: 'none',
                                    color: '#23272f',
                                    fontSize: 15,
                                    padding: '10px 18px',
                                    textAlign: 'left',
                                    cursor: 'pointer',
                                    transition: 'all 0.18s ease',
                                  }}
                                  onMouseEnter={(e) => {
                                    e.currentTarget.style.background = '#1a1a1a';
                                    e.currentTarget.style.color = '#00ffe7';
                                  }}
                                  onMouseLeave={(e) => {
                                    e.currentTarget.style.background = 'none';
                                    e.currentTarget.style.color = '#23272f';
                                  }}
                                >
                                  Excel
                                </button>
                                <button
                                  onClick={(e) => { 
                                    e.stopPropagation(); 
                                    exportCsv([["AI-–≤—ñ–¥–ø–æ–≤—ñ–¥—å"], [msg.text]]); 
                                    setOpenExportDropdownIdx(null); 
                                  }}
                                  style={{
                                    width: '100%',
                                    background: 'none',
                                    border: 'none',
                                    color: '#23272f',
                                    fontSize: 15,
                                    padding: '10px 18px',
                                    textAlign: 'left',
                                    cursor: 'pointer',
                                    transition: 'all 0.18s ease',
                                  }}
                                  onMouseEnter={(e) => {
                                    e.currentTarget.style.background = '#1a1a1a';
                                    e.currentTarget.style.color = '#00ffe7';
                                  }}
                                  onMouseLeave={(e) => {
                                    e.currentTarget.style.background = 'none';
                                    e.currentTarget.style.color = '#23272f';
                                  }}
                                >
                                  CSV
                                </button>
                                <button
                                  onClick={(e) => { 
                                    console.log('=== TXT BUTTON CLICKED ===');
                                    e.stopPropagation(); 
                                    console.log('stopPropagation called');
                                    console.log('TXT export button clicked!'); 
                                    exportTxt(msg.text); 
                                    setOpenExportDropdownIdx(null); 
                                  }}
                                  style={{
                                    width: '100%',
                                    background: 'none',
                                    border: 'none',
                                    color: '#23272f',
                                    fontSize: 15,
                                    padding: '10px 18px',
                                    textAlign: 'left',
                                    cursor: 'pointer',
                                    transition: 'all 0.18s ease',
                                  }}
                                  onMouseEnter={(e) => {
                                    e.currentTarget.style.background = '#1a1a1a';
                                    e.currentTarget.style.color = '#00ffe7';
                                  }}
                                  onMouseLeave={(e) => {
                                    e.currentTarget.style.background = 'none';
                                    e.currentTarget.style.color = '#23272f';
                                  }}
                                >
                                  TXT
                                </button>
                                <button
                                  onClick={(e) => { 
                                    e.stopPropagation(); 
                                    exportPdf(msg.text); 
                                    setOpenExportDropdownIdx(null); 
                                  }}
                                  style={{
                                    width: '100%',
                                    background: 'none',
                                    border: 'none',
                                    color: '#23272f',
                                    fontSize: 15,
                                    padding: '10px 18px',
                                    textAlign: 'left',
                                    cursor: 'pointer',
                                    transition: 'all 0.18s ease',
                                  }}
                                  onMouseEnter={(e) => {
                                    e.currentTarget.style.background = '#1a1a1a';
                                    e.currentTarget.style.color = '#00ffe7';
                                  }}
                                  onMouseLeave={(e) => {
                                    e.currentTarget.style.background = 'none';
                                    e.currentTarget.style.color = '#23272f';
                                  }}
                                >
                                  PDF
                                </button>
                                <button
                                  onClick={(e) => { 
                                    e.stopPropagation(); 
                                    exportJson(msg.text); 
                                    setOpenExportDropdownIdx(null); 
                                  }}
                                  style={{
                                    width: '100%',
                                    background: 'none',
                                    border: 'none',
                                    color: '#23272f',
                                    fontSize: 15,
                                    padding: '10px 18px',
                                    textAlign: 'left',
                                    cursor: 'pointer',
                                    transition: 'all 0.18s ease',
                                  }}
                                  onMouseEnter={(e) => {
                                    e.currentTarget.style.background = '#1a1a1a';
                                    e.currentTarget.style.color = '#00ffe7';
                                  }}
                                  onMouseLeave={(e) => {
                                    e.currentTarget.style.background = 'none';
                                    e.currentTarget.style.color = '#23272f';
                                  }}
                                >
                                  JSON
                                </button>
                              </div>
                            )}
                          </div>
                        </div>
                      )}
                    </>
                  )
                  : msg.text
              }
              {msg.image && (
                <div style={{ marginTop: '12px' }}>
                  <img
                    src={msg.image}
                    alt="Uploaded image"
                    style={{
                      maxWidth: '100%',
                      maxHeight: '300px',
                      borderRadius: '8px',
                      border: '1px solid #e2e8f0',
                    }}
                  />
                </div>
              )}
            </span>
            {msg.role === 'ai' && (
  // –ü–æ–∫–∞–∑—É—î–º–æ –∫–Ω–æ–ø–∫–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—î AI-–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ typingText, –∞–±–æ —è–∫—â–æ typingText === null
  ((idx !== messages.length - 1) || typingText === null) && (
    <div style={{ display: 'flex', alignItems: 'center', gap: 4, marginTop: 8 }}>
      {/* –ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –∫–Ω–æ–ø–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è */}
      <button
        onClick={() => {
          navigator.clipboard.writeText(msg.text);
          setCopied(true);
          setTimeout(() => setCopied(false), 1200);
        }}
        style={{
          background: 'none',
          border: 'none',
          padding: 2,
          margin: 0,
          cursor: 'pointer',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          outline: 'none',
          boxShadow: 'none',
          minWidth: 0,
          minHeight: 0,
        }}
        title="–°–∫–æ–ø—ñ—é–≤–∞—Ç–∏"
      >
        {copied ? (
          <svg width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="#22c55e" strokeWidth="2.2" strokeLinecap="round" strokeLinejoin="round">
            <polyline points="20 6 9 17 4 12" />
          </svg>
        ) : (
          <svg width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="#23272f" strokeWidth="2.2" strokeLinecap="round" strokeLinejoin="round">
            <rect x="9" y="9" width="13" height="13" rx="2" ry="2" />
            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" />
          </svg>
        )}
      </button>
      {/* –ú—ñ–Ω—ñ–º–∞–ª—ñ—Å—Ç–∏—á–Ω–∞ –∫–Ω–æ–ø–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É */}
      <div style={{ position: 'relative', display: 'inline-block' }}>
        <button
          onClick={e => {
            e.stopPropagation();
            setOpenExportDropdownIdx(openExportDropdownIdx === idx ? null : idx);
          }}
          style={{
            background: 'none',
            border: 'none',
            padding: 2,
            margin: 0,
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            outline: 'none',
            boxShadow: 'none',
            minWidth: 0,
            minHeight: 0,
          }}
          title="–°–∫–∞—á–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
        >
          <svg width="15" height="15" viewBox="0 0 24 24" fill="none" stroke="#23272f" strokeWidth="2.2" strokeLinecap="round" strokeLinejoin="round">
            <path d="M12 5v12"/>
            <path d="M6 13l6 6 6-6"/>
            <rect x="4" y="19" width="16" height="2" rx="1" fill="#23272f" stroke="none"/>
          </svg>
        </button>
        {openExportDropdownIdx === idx && (
          <div 
            data-export-dropdown="true"
            onClick={(e) => e.stopPropagation()}
            style={{
              position: 'absolute',
              top: '110%',
              left: 0,
              background: '#fff',
              border: '1.2px solid #e2e8f0',
              borderRadius: 8,
              boxShadow: '0 4px 16px rgba(30,40,90,0.10)',
              minWidth: 120,
              zIndex: 100,
              padding: '4px 0',
            }}
          >
            
            <button
              onClick={(e) => { e.stopPropagation(); exportXlsx([["AI-–≤—ñ–¥–ø–æ–≤—ñ–¥—å"], [msg.text]]); setOpenExportDropdownIdx(null); }}
              style={{
                width: '100%',
                background: 'none',
                border: 'none',
                color: '#23272f',
                fontSize: 15,
                padding: '8px 16px',
                textAlign: 'left',
                cursor: 'pointer',
                transition: 'all 0.18s ease',
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = '#1a1a1a';
                e.currentTarget.style.color = '#00ffe7';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = 'none';
                e.currentTarget.style.color = '#23272f';
              }}
            >
              Excel
            </button>
            <button
              onClick={(e) => { e.stopPropagation(); exportCsv([["AI-–≤—ñ–¥–ø–æ–≤—ñ–¥—å", msg.text]]); setOpenExportDropdownIdx(null); }}
              style={{
                width: '100%',
                background: 'none',
                border: 'none',
                color: '#23272f',
                fontSize: 15,
                padding: '8px 16px',
                textAlign: 'left',
                cursor: 'pointer',
                transition: 'all 0.18s ease',
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = '#1a1a1a';
                e.currentTarget.style.color = '#00ffe7';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = 'none';
                e.currentTarget.style.color = '#23272f';
              }}
            >
              CSV
            </button>
            <button
              onClick={(e) => { e.stopPropagation(); console.log('TXT export button clicked!'); exportTxt(msg.text); setOpenExportDropdownIdx(null); }}
              style={{
                width: '100%',
                background: 'none',
                border: 'none',
                color: '#23272f',
                fontSize: 15,
                padding: '8px 16px',
                textAlign: 'left',
                cursor: 'pointer',
                transition: 'all 0.18s ease',
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = '#1a1a1a';
                e.currentTarget.style.color = '#00ffe7';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = 'none';
                e.currentTarget.style.color = '#23272f';
              }}
            >
              TXT
            </button>
            <button
              onClick={(e) => { e.stopPropagation(); exportPdf(msg.text); setOpenExportDropdownIdx(null); }}
              style={{
                width: '100%',
                background: 'none',
                border: 'none',
                color: '#23272f',
                fontSize: 15,
                padding: '8px 16px',
                textAlign: 'left',
                cursor: 'pointer',
                transition: 'all 0.18s ease',
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = '#1a1a1a';
                e.currentTarget.style.color = '#00ffe7';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = 'none';
                e.currentTarget.style.color = '#23272f';
              }}
            >
              PDF
            </button>
            <button
              onClick={(e) => { e.stopPropagation(); exportJson(msg.text); setOpenExportDropdownIdx(null); }}
              style={{
                width: '100%',
                background: 'none',
                border: 'none',
                color: '#23272f',
                fontSize: 15,
                padding: '8px 16px',
                textAlign: 'left',
                cursor: 'pointer',
                transition: 'all 0.18s ease',
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.background = '#1a1a1a';
                e.currentTarget.style.color = '#00ffe7';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.background = 'none';
                e.currentTarget.style.color = '#23272f';
              }}
            >
              JSON
            </button>
          </div>
        )}
      </div>
    </div>
  )
)}
          </div>
        ))}
        {loading && (
          <div style={{ display: 'flex', alignItems: 'center', gap: 16, margin: '18px 0 0 0', opacity: 0.85, animation: 'fadeIn 0.5s' }}>
            <div style={{ flexShrink: 0 }}>{AI_AVATAR}</div>
            <span style={{
              display: 'inline-block',
              background: '#e6f7ff',
              color: '#23272f',
              borderRadius: 16,
              padding: '14px 32px',
              maxWidth: 520,
              wordBreak: 'break-word',
              fontSize: 18,
              boxShadow: '0 2px 8px rgba(0,0,0,0.03)',
              border: '1.5px solid #e6f7ff',
              fontStyle: 'italic',
              letterSpacing: '0.5px',
            }}>
              AI –¥—É–º–∞—î‚Ä¶
            </span>
          </div>
        )}
        {/* –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å" */}
        {/* –í–∏–¥–∞–ª—è—é –±–ª–æ–∫: */}
        {/* {!loading && messages.length > 0 && messages[messages.length-1].role === 'ai' && (
          <div style={{ textAlign: 'center', margin: '12px 0' }}>
            <button onClick={handleContinue} style={{
              background: '#e6f7ff',
              color: '#23272f',
              border: '1.5px solid #0ea5e9',
              borderRadius: 10,
              padding: '10px 28px',
              fontSize: 17,
              fontWeight: 600,
              cursor: 'pointer',
              boxShadow: '0 2px 8px rgba(0,0,0,0.03)',
              marginTop: 8,
              transition: 'background 0.2s',
            }}>–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å</button>
          </div>
        )} */}
        <div ref={chatEndRef} />
      </div>
      {/* Input */}
      <form onSubmit={handleSubmit} style={{
        display: 'flex',
        gap: 16,
        padding: '18px 24px 32px 24px', // –±—ñ–ª—å—à–µ –º—ñ—Å—Ü—è –∑–Ω–∏–∑—É
        borderTop: '1px solid #e2e8f0',
        background: '#fff',
        borderBottomLeftRadius: 0,
        borderBottomRightRadius: 0,
        alignItems: 'flex-end',
      }}>
        <div style={{ position: 'relative', flex: 1 }}>
          <textarea
            ref={inputRef}
            value={input}
            onChange={e => {
              setInput(e.target.value);
              e.target.style.height = '40px';
              e.target.style.height = e.target.scrollHeight + 'px';
            }}
            onKeyDown={e => {
              if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                if (!loading && input.trim()) {
                  // –í–∏–∫–ª–∏–∫–∞—î–º–æ submit —Ñ–æ—Ä–º–∏
                  (e.target as HTMLTextAreaElement).form?.dispatchEvent(new Event('submit', { cancelable: true, bubbles: true }));
                }
              }
            }}
            placeholder={placeholders[placeholderIndex]}
            disabled={loading}
            rows={1}
            style={{
              width: '100%',
              minHeight: 40,
              maxHeight: 260,
              resize: 'none',
              overflowY: 'auto',
              padding: '8px 10px 8px 32px',
              borderRadius: '0 0 8px 8px',
              border: '1.2px solid #cbd5e1',
              fontSize: 15,
              fontFamily: 'Inter, Segoe UI, Arial, sans-serif',
              lineHeight: 1.3,
              background: '#f9fafc',
              color: '#23272f',
              outline: 'none',
              boxShadow: '0 1px 2px rgba(0,0,0,0.01)',
              transition: 'height 0.2s',
              boxSizing: 'border-box',
            }}
            autoFocus
          />
          <input
            type="file"
            accept="image/*"
            onChange={handleImageUpload}
            style={{ display: 'none' }}
            id="image-upload"
          />
          <button
            type="button"
            onClick={() => {
              document.getElementById('image-upload')?.click();
            }}
            style={{
              position: 'absolute',
              left: '6px',
              top: '50%',
              transform: 'translateY(-50%)',
              background: 'none',
              border: 'none',
              color: '#9ca3af',
              cursor: 'pointer',
              padding: '4px',
              borderRadius: '4px',
              transition: 'color 0.2s',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
            }}
            title="Upload image"
            onMouseEnter={(e) => {
              e.currentTarget.style.color = '#7f9cf5';
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.color = '#9ca3af';
            }}
          >
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2"/>
              <circle cx="8.5" cy="8.5" r="1.5"/>
              <polyline points="21,15 16,10 5,21"/>
            </svg>
          </button>
        </div>
        <button
          type="submit"
          disabled={loading || !input.trim()}
          aria-label={loading || typingText !== null ? '–ó—É–ø–∏–Ω–∏—Ç–∏ –¥—Ä—É–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ' : '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏'}
          style={{
            width: 40,
            height: 40,
            borderRadius: '50%',
            background: loading || typingText !== null ? '#e2e8f0' : '#23272f',
            color: loading || typingText !== null ? '#888' : '#fff',
            border: 'none',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: 20,
            cursor: loading || typingText !== null ? 'pointer' : 'pointer',
            transition: 'background 0.2s',
            boxShadow: '0 2px 8px rgba(0,0,0,0.04)',
            marginLeft: 8
          }}
          onClick={e => {
            if (typingText !== null && typingTextRef.current !== null) {
              typingInterrupted.current = true;
              setTypingText(null);
              typingTextRef.current = null;
              if (typingTimeout.current) clearTimeout(typingTimeout.current);
              // –ü–æ–∫–∞–∑–∞—Ç–∏ –æ–¥—Ä–∞–∑—É –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
              const lastAiMsg = messages[messages.length - 1]?.text;
              if (lastAiMsg) setMessages(prev => prev.map((m, i) => i === prev.length - 1 ? { ...m, text: lastAiMsg } : m));
              e.preventDefault();
            }
          }}
        >
          {(loading || typingText !== null) ? (
            // –ö–≤–∞–¥—Ä–∞—Ç–∏–∫ (—è–∫ —É —Ü—å–æ–º—É —á–∞—Ç—ñ)
            <svg width="22" height="22" viewBox="0 0 22 22" fill="none">
              <rect x="5" y="5" width="12" height="12" rx="3" fill="#888" />
            </svg>
          ) : (
            // –°—Ç—Ä—ñ–ª–æ—á–∫–∞
            <svg width="22" height="22" viewBox="0 0 22 22" fill="none">
              <path d="M3 11L19 3L11 19L10 13L3 11Z" fill="currentColor"/>
            </svg>
          )}
        </button>
      </form>
      
      {/* Image preview */}
      {imagePreview && (
        <div style={{
          padding: '0 24px 16px 24px',
          background: '#fff',
        }}>
          <div style={{
            position: 'relative',
            display: 'inline-block',
            maxWidth: '200px',
            borderRadius: '8px',
            overflow: 'hidden',
            border: '1px solid #e2e8f0',
          }}>
            <img
              src={imagePreview}
              alt="Preview"
              style={{
                width: '100%',
                height: 'auto',
                display: 'block',
              }}
            />
            <button
              onClick={removeImage}
              style={{
                position: 'absolute',
                top: '4px',
                right: '4px',
                background: 'rgba(0,0,0,0.7)',
                color: '#fff',
                border: 'none',
                borderRadius: '50%',
                width: '24px',
                height: '24px',
                fontSize: '14px',
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
              }}
              title="Remove image"
            >
              √ó
            </button>
          </div>
        </div>
      )}
      {/* Example prompt suggestions under textarea */}
      <div style={{
        display: 'flex',
        gap: 10,
        justifyContent: 'center',
        margin: '0 48px 10px 48px',
        flexWrap: 'wrap',
      }}>
        {[
          "How can I improve my Google Ads campaign?",
          "Why is my CPA so high?",
          "Show me insights for my last 30 days."
        ].map((example, i) => (
          <button
            key={i}
            type="button"
            onClick={() => setInput(example)}
            style={{
              background: '#f5f5f5',
              color: '#23272f',
              border: '1.2px solid #e2e8f0',
              borderRadius: 8,
              padding: '7px 16px',
              fontSize: 15,
              fontWeight: 500,
              cursor: 'pointer',
              transition: 'background 0.18s, border 0.18s',
              marginBottom: 2,
              boxShadow: '0 1px 4px rgba(0,0,0,0.03)',
              outline: 'none',
              whiteSpace: 'nowrap',
            }}
            tabIndex={0}
            aria-label={`Insert example: ${example}`}
          >
            {example}
          </button>
        ))}
      </div>
      {/* –ü—ñ–¥–∫–∞–∑–∫–∞ –ø—ñ–¥ textarea */}
      <div style={{ color: '#888', fontSize: 14, margin: '0 48px 12px 48px', textAlign: 'center' }}>
        For a personalized answer, click <b>"Use Google Ads data"</b> before submitting your question.
      </div>
      {error && <div style={{ color: 'red', margin: '0 48px 10px 48px' }}>{error}</div>}
      {/* –ú–æ–¥–∞–ª–∫–∞-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∞–∫–∞—É–Ω—Ç–∞ */}
      {showAccountModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          width: '100vw',
          height: '100vh',
          background: 'rgba(0,0,0,0.18)',
          zIndex: 1000,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
        }}>
          <div style={{
            background: '#fff',
            borderRadius: 16,
            boxShadow: '0 8px 32px rgba(0,0,0,0.12)',
            padding: '36px 32px',
            minWidth: 340,
            maxWidth: 420,
            textAlign: 'center',
            position: 'relative',
          }}>
            <button onClick={() => setShowAccountModal(false)} style={{ position: 'absolute', top: 12, right: 16, background: 'none', border: 'none', fontSize: 22, color: '#888', cursor: 'pointer' }}>&times;</button>
            <svg width="48" height="48" viewBox="0 0 48 48" fill="none" style={{ marginBottom: 12 }}>
              <circle cx="24" cy="24" r="22" stroke="#0ea5e9" strokeWidth="3" fill={accountConnected ? '#e6f7ff' : '#fff'} />
              <path d="M16 24l6 6L36 16" stroke="#0ea5e9" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round" style={{ opacity: accountConnected ? 1 : 0 }} />
            </svg>
            <div style={{ fontWeight: 700, fontSize: 20, color: '#23272f', marginBottom: 10 }}>
              {accountConnected ? 'Google Ads account connected!' : 'Connect Google Ads account'}
            </div>
            <div style={{ color: '#555', fontSize: 16, marginBottom: 24 }}>
              {accountConnected
                ? 'You have successfully connected your Google Ads account. Now AI can analyze your real data.'
                : 'Connect your Google Ads account to receive personalized recommendations based on real data.'}
            </div>
            {accountConnected ? (
              <button
                onClick={() => { 
                  setAccountConnected(false); 
                  setAccessToken(null);
                  setShowAccountModal(false); 
                }}
                style={{
                  background: '#fff',
                  color: '#0ea5e9',
                  border: '1.5px solid #0ea5e9',
                  borderRadius: 8,
                  padding: '10px 28px',
                  fontSize: 16,
                  fontWeight: 600,
                  cursor: 'pointer',
                  boxShadow: '0 2px 8px rgba(0,0,0,0.03)',
                  marginTop: 8,
                  transition: 'background 0.2s',
                }}
              >Disconnect account</button>
            ) : (
              <button
                onClick={() => window.location.href = '/api/auth/login'}
                style={{
                  background: '#0ea5e9',
                  color: '#fff',
                  border: 'none',
                  borderRadius: 8,
                  padding: '10px 28px',
                  fontSize: 16,
                  fontWeight: 600,
                  cursor: 'pointer',
                  boxShadow: '0 2px 8px rgba(0,0,0,0.03)',
                  marginTop: 8,
                  transition: 'background 0.2s',
                }}
              >Connect Google Ads account</button>
            )}
          </div>
        </div>
      )}
      <style>{`
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(16px); }
          to { opacity: 1; transform: none; }
        }
        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        [data-chat-theme="dark"] .chat-root {
          background: #23272f !important;
          color: #fff !important;
          border-color: #23272f !important;
          transition: background 0.3s, border 0.3s;
        }
        [data-chat-theme="dark"] .chat-root * {
          color: #fff !important;
          border-color: #23272f !important;
          transition: background 0.3s, color 0.3s, border 0.3s;
        }
        [data-chat-theme="dark"] .chat-root .description, [data-chat-theme="dark"] .chat-root .subtitle {
          color: #a0a0a0 !important;
        }
        [data-chat-theme="dark"] .chat-root textarea {
          background: #23272f !important;
          color: #fff !important;
          border-color: #7f9cf5 !important;
        }
        [data-chat-theme="dark"] .chat-root textarea::placeholder {
          color: #a0a0a0 !important;
        }
        [data-chat-theme="dark"] .chat-root button {
          background: #23272f !important;
          color: #7f9cf5 !important;
          border: 1.5px solid #7f9cf5 !important;
          box-shadow: none !important;
          transition: background 0.2s, color 0.2s, border 0.2s, box-shadow 0.2s;
        }
        [data-chat-theme="dark"] .chat-root button:hover, [data-chat-theme="dark"] .chat-root button:focus {
          color: #00ffe7 !important;
          border-color: #00ffe7 !important;
          box-shadow: 0 0 8px #00ffe755 !important;
        }
        [data-chat-theme="dark"] .chat-root svg {
          color: #7f9cf5 !important;
          stroke: #7f9cf5 !important;
          transition: color 0.2s, stroke 0.2s;
        }
        [data-chat-theme="dark"] .chat-root button:hover svg, [data-chat-theme="dark"] .chat-root button:focus svg {
          color: #00ffe7 !important;
          stroke: #00ffe7 !important;
        }
        [data-chat-theme="dark"] .chat-root .ai-bubble {
          background: #23272f !important;
          border: 1.5px solid #23272f !important;
          color: #fff !important;
        }
        [data-chat-theme="dark"] .chat-root .user-bubble {
          background: #18191a !important;
          border: 1.5px solid #23272f !important;
          color: #fff !important;
        }
        [data-chat-theme="dark"] .chat-root .avatar {
          background: #1a1a1a !important;
        }
      `}</style>
        </div>
      </div>
    </div>
  );
};

export default ChatFormGPT; 